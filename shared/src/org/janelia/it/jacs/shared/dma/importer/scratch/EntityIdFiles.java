/*
 * Copyright (c) 2010-2011, J. Craig Venter Institute, Inc.
 *
 * This file is part of JCVI VICS.
 *
 * JCVI VICS is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the Artistic License 2.0.  For
 * details, see the full text of the license in the file LICENSE.txt.  No
 * other rights are granted.  Any and all third party software rights to
 * remain with the original developer.
 *
 * JCVI VICS is distributed in the hope that it will be useful in
 * bioinformatics applications, but it is provided "AS IS" and WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTIES including but not limited to
 * implied warranties of merchantability or fitness for any particular
 * purpose.  For details, see the full text of the license in the file
 * LICENSE.txt.
 *
 * You should have received a copy of the Artistic License 2.0 along with
 * JCVI VICS.  If not, the license can be obtained from
 * "http://www.perlfoundation.org/artistic_license_2_0."
 */

package org.janelia.it.jacs.shared.dma.importer.scratch;

import org.janelia.it.jacs.shared.dma.DmaArgs;
import org.janelia.it.jacs.shared.dma.DmaFile;
import org.janelia.it.jacs.shared.dma.DmaFiles;
import org.janelia.it.jacs.shared.utils.FileUtil;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 * This class respresents the eeid and ieid files generated by the xxEntityIdBatchWriter classes.  We need it because
 * we can't hold 120 million entity ids in JDBC resultset.  Moreever, we can't page through 120 million records
 * using (limit/offset) or JDBC maxResults because the queries perform very slow after 500k records
 *
 * @author Tareq Nabeel
 */
public class EntityIdFiles extends DmaFiles {

    public EntityIdFiles(File file, String[] extensions, DmaArgs dmaArgs) {
        super(file, extensions, dmaArgs);
    }

    /**
     * Retrieval in EntityIdFiles is based on values written out by BaseEntityIdBatchWriter
     * to .count files
     *
     * @param dmafile
     * @return
     */
    protected long retrieveSequenceCount(DmaFile dmafile) {
        long targetSeqCount;
        try {
            String dirPath = dmafile.getFile().getParentFile().getAbsolutePath();
            String idFileName = dmafile.getFile().getName();
            File countFile = FileUtil.checkFileExists(dirPath + File.separator + idFileName.substring(0, idFileName.indexOf(".") + 1) + "count");
            BufferedReader strReader = new BufferedReader(new FileReader(countFile));
            targetSeqCount = Long.parseLong(strReader.readLine());
            strReader.close();
        }
        catch (IOException e) {
            throw new RuntimeException(e);
        }
        return targetSeqCount;
    }

    protected void initDmaFile(DmaFile dmaFile) {
    }
}
