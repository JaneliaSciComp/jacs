/**************************************************************************
  Copyright (c) 2010-2011, J. Craig Venter Institute, Inc.

  This file is part of JCVI VICS.

  JCVI VICS is free software; you can redistribute it and/or modify it 
  under the terms and conditions of the Artistic License 2.0.  For 
  details, see the full text of the license in the file LICENSE.txt.  
  No other rights are granted.  Any and all third party software rights 
  to remain with the original developer.

  JCVI VICS is distributed in the hope that it will be useful in 
  bioinformatics applications, but it is provided "AS IS" and WITHOUT 
  ANY EXPRESS OR IMPLIED WARRANTIES including but not limited to implied 
  warranties of merchantability or fitness for any particular purpose.  
  For details, see the full text of the license in the file LICENSE.txt.

  You should have received a copy of the Artistic License 2.0 along with 
  JCVI VICS.  If not, the license can be obtained from 
  "http://www.perlfoundation.org/artistic_license_2_0."
***************************************************************************/

package org.jcvi.vics.shared.tools.datamigration;

import java.sql.*;

public class UpdateDeflineForSeqWithSamples {
// Constants

// Attributes

// Members

// Constructors

// Destructor

    // Operations
    static public void main(String args[]) {
        int cmdlineindx = 0;
        String jdbcDriver = "org.postgresql.Driver";
        String database = "jdbc:postgresql://your_dbhost:5432/your_db";
        String username = "your_dbuser";
        String password = "your_dbpwd";
        int maxrows = 1000;
        int pagesize = 0;
        int nsteps = 100;
        for (; cmdlineindx < args.length;) {
            try {
                if (args[cmdlineindx].equals("-database")) {
                    database = args[cmdlineindx + 1];
                    cmdlineindx += 2;
                }
                else if (args[cmdlineindx].equals("-driver")) {
                    jdbcDriver = args[cmdlineindx + 1];
                    cmdlineindx += 2;
                }
                else if (args[cmdlineindx].equals("-user")) {
                    username = args[cmdlineindx + 1];
                    cmdlineindx += 2;
                }
                else if (args[cmdlineindx].equals("-password")) {
                    password = args[cmdlineindx + 1];
                    cmdlineindx += 2;
                }
                else if (args[cmdlineindx].equals("-maxrows")) {
                    maxrows = Integer.parseInt(args[cmdlineindx + 1]);
                    cmdlineindx += 2;
                }
                else if (args[cmdlineindx].equals("-pagesize")) {
                    pagesize = Integer.parseInt(args[cmdlineindx + 1]);
                    cmdlineindx += 2;
                }
                else if (args[cmdlineindx].equals("-steps")) {
                    nsteps = Integer.parseInt(args[cmdlineindx + 1]);
                    cmdlineindx += 2;
                }
                else if (args[cmdlineindx].equals("-help")) {
                    usage(null, null);
                }
                else {
                    usage(null, null);
                }
            }
            catch (Exception e) {
                usage(null, e);
            }
        } // end args
        if (pagesize == 0) {
            pagesize = maxrows;
        }
        try {
            // open the database connection
            registerDriver(jdbcDriver);
            Connection connection = DriverManager.getConnection(database,
                    username,
                    password);
            connection.setAutoCommit(false);
            int step = 0;
            String query =
                    "select * " +
                            "from populateTmpSeqEntityWithSeqTable(?,?) as " +
                            "(" +
                            "latest_offset integer," +
                            "latest_entity_id bigint," +
                            "latest_acc varchar" +
                            ")";
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setInt(1, maxrows);
            pstmt.setInt(2, pagesize);
            int offset = 0;
            long latestEntityId = 0L;
            String sequence_acc = null;
            for (; ;) {
                if (nsteps > 0 && step > nsteps) {
                    break;
                }
                ResultSet rs = null;
                try {
                    rs = pstmt.executeQuery();
                    long entityId = 0L;
                    while (rs.next()) {
                        offset = rs.getInt(1);
                        entityId = rs.getLong(2);
                        sequence_acc = rs.getString(3);
                    }
                    if (entityId == 0L || entityId == latestEntityId) {
                        // haven't actually updated anything
                        break;
                    }
                    else {
                        latestEntityId = entityId;
                        System.out.println(new Timestamp
                                (System.currentTimeMillis()) + " " +
                                "Step " + (++step) + ": " +
                                "latest update (offset/entityId/acc) " +
                                offset + "/" +
                                latestEntityId + "/" +
                                sequence_acc);
                    }
                }
                finally {
                    if (rs != null) {
                        try {
                            rs.close();
                        }
                        catch (Exception ignore) {
                        }
                    }
                }
                connection.commit();
            } // end forever
        }
        catch (Throwable e) {
            e.printStackTrace();
        }
    } // end main

    /**
     * usage
     */
    static void usage(String msg, Exception e) {
        if (msg != null) {
            System.out.println(msg);
        }
        if (e != null) {
            e.printStackTrace();
        }
        System.out.println("java UpdateDeflineForSeqWithSamples " +
                "[-database <database>] " +
                "[-driver <driver>] " +
                "[-user <user>] " +
                "[-password <password>] " +
                "[-maxrows <rows to process per sql invocation>] " +
                "[-steps <number of sql function invocations>] " +
                "[-help]");
        System.exit(0);
    }

    /**
     * registerDriver
     */
    static void registerDriver(String driverClassname)
            throws Exception {
        Class clazz = Class.forName(driverClassname);
        DriverManager.registerDriver((Driver) clazz.newInstance());
    }

}
