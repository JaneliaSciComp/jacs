<?xml version="1.0"?>
<!--
  ~ Copyright (c) 2010-2011, J. Craig Venter Institute, Inc.
  ~
  ~ This file is part of JCVI VICS.
  ~
  ~ JCVI VICS is free software; you can redistribute it and/or modify it
  ~ under the terms and conditions of the Artistic License 2.0.  For
  ~ details, see the full text of the license in the file LICENSE.txt.  No
  ~ other rights are granted.  Any and all third party software rights to
  ~ remain with the original developer.
  ~
  ~ JCVI VICS is distributed in the hope that it will be useful in
  ~ bioinformatics applications, but it is provided "AS IS" and WITHOUT
  ~ ANY EXPRESS OR IMPLIED WARRANTIES including but not limited to
  ~ implied warranties of merchantability or fitness for any particular
  ~ purpose.  For details, see the full text of the license in the file
  ~ LICENSE.txt.
  ~
  ~ You should have received a copy of the Artistic License 2.0 along with
  ~ JCVI VICS.  If not, the license can be obtained from
  ~ "http://www.perlfoundation.org/artistic_license_2_0."
  -->

<project name="compute" default="build">
    <!-- Import all the generic module targets -->

    <import file="../buildprocess/build-module.xml"/>
    <tstamp prefix="start"/>

    <property file="../buildprocess/config/${user.name}.properties" />
    <property name="localname" value="compute"/>
    <property name="condesc.dir" value="${basedir}/conf/container_descriptor"/>
    <property name="webServices.dir" value="${basedir}/conf/webServices"/>
    <property name="jacs.properties.dir" value="${basedir}/../shared/conf"/>
    <property name="build.jars.dir" value="${basedir}/build/jars"/>

    <property name="rest-ws-war" value="${localname}-rest-ws.war"/>
    <property name="secure-ws-war" value="${localname}-secure-ws.war"/>

    <!-- Set some generic properties. Doing it in this target gives us access to all props in the generic set-common-properties -->
    <target name="set-common-properties" depends="build-module-init.set-common-properties">
        <property name="common.module" value="${basedir}/../common"/>
        <property name="model.module" value="${basedir}/../model"/>
        <property name="jar.name" value="${localname}.jar"/>
        <property name="test.jar.name" value="${localname}-test.jar"/>
        <property name="drmaa.jar.name" value="${localname}-drmaa.jar"/>
        <property name="build.unzipped.dir" value="${build.jars.dir}/unzipped"/>

        <!-- Add jars (not in ${lib.dir}) required for compiling src -->
        <path id="compile.classpath.additional">
            <pathelement location="${model.module}/build/jars/jacs-model.jar"/>
            <pathelement location="${shared.module}/build/jars/jacs-shared.jar"/>
            <pathelement location="${common.dir}/Lucene-2.3.1/lucene-core-2.3.1.jar"/>
            <fileset dir="${basedir}/../common" includes="**/*.jar"/>
        </path>

        <!-- additional classes needed to compile and/or run tests -->
        <path id="test.classpath.additional">
            <pathelement path="${model.module}/build/test/classes"/> <!-- shared test classes -->
            <pathelement location="${compute.module}/scripts/blast/"/>
            <fileset file="${compute.module}/scripts/blast/blast.parameters"/>
            <pathelement location="${shared.module}/conf" />
        </path>

    </target>

	<target name="local-compile" depends="setup, make-classes-dir, make-lib-dir" if="src.dir.exists">
	</target>

    <target name="local-jar" depends="local-compile, compile, make-jars-dir" unless="manifest.classpath">  
    	<property name="dep.dir" value="${build.jars.dir}/lib"/>
        <delete dir="${dep.dir}"/>
        <mkdir dir="${dep.dir}" />

        <!-- Maintenance note: to add a jar to the lib folder of compute's ear file, add it to compute.classpath. -->
        <path id="compute.classpath">
            <fileset dir="${basedir}/lib" includes="**/*.jar"/>
		    <fileset file="${common.dir}/Logging/slf4j-api-1.7.5.jar"/>
		    <fileset file="${common.dir}/Logging/slf4j-log4j12-1.7.5.jar"/>
			<fileset dir="${common.dir}/Apache-Commons" includes="**/*.jar"/>
            <fileset dir="${common.dir}/Directory" includes="**/*.jar"/>
            <fileset dir="${common.dir}/Solrj" includes="**/*.jar"/>
			<fileset dir="${common.dir}/ehcache" includes="**/*.jar"/>
			<fileset dir="${common.dir}/MongoDB" includes="**/*.jar"/>
			<fileset dir="${common.dir}/jama-1.0.1" includes="**/*.jar"/>
			<fileset dir="${common.dir}/Guava" includes="**/*.jar"/>
            <fileset dir="${common.dir}/Reflections" includes="**/*.jar"/>
            <fileset dir="${common.dir}/snakeyaml-1.11" includes="**/*.jar"/>
            <fileset dir="${common.dir}/commons-vfs" includes="**/*.jar"/>
            <fileset dir="${common.dir}/commons-net" includes="**/*.jar"/>
            <fileset dir="${common.dir}/JodaTime" includes="**/*.jar"/>
            <fileset dir="${common.dir}/Hibernate-5.2.2" includes="**/*.jar"/>
            <fileset dir="${common.dir}/protostuff-1.3.9" includes="**/*.jar"/>
            <fileset dir="${common.dir}/JAX-RS-2.0.1" includes="**/*.jar"/>
            <fileset dir="${common.dir}/Jersey-2.19" includes="**/*.jar"/>
            <fileset file="${common.dir}/GWT/gwt-servlet.jar"/>
            <fileset file="${common.dir}/Spring/jxl.jar"/>
            <fileset file="${common.dir}/Spring/spring.jar"/>
            <fileset file="${common.dir}/Wildfly-10/jboss-client.jar"/>
            <fileset dir="${basedir}/../shared/lib" includes="**/jai*.jar"/>
        </path>
    		
    	<copy todir="${dep.dir}" flatten="true">
    	  	<path refid="compute.classpath"/>
    	</copy>
    	
		<path id="dependency.classpath">
			<fileset dir="${dep.dir}" includes="**/*.jar"/>
        </path>	
    	
    	<manifestclasspath property="manifest.classpath" jarfile="${build.jars.dir}/empty.ear">
       		<classpath refid="dependency.classpath" />
        </manifestclasspath>

	    <jar destfile="${build.jars.dir}/${jar.name}">
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
            <fileset dir="${basedir}/conf/resource" includes="*.process"/>
            <fileset file="${jacs.properties.dir}/jacs.properties"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
                <attribute name="Class-Path" value="${manifest.classpath}"/>
            </manifest>
            <metainf dir="${condesc.dir}" includes="persistence.xml"/>
            <metainf dir="${condesc.dir}" includes="beans.xml"/>
        </jar>

	</target>

    <target name="test-jar" depends="local-compile, make-jars-dir">
        <jar destfile="${build.jars.dir}/${test.jar.name}" >
            <fileset dir="${basedir}/test/conf/fasta" />
            <fileset dir="${basedir}/test/conf/process" includes="*.process"/>
            <fileset dir="${basedir}/test/conf/process/xmlpersist"  includes="*.process"/>
            <fileset dir="${basedir}/test/conf/parameter" />
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
        </jar>
	</target>

    <!-- build jacs-drmaa.jar -->
    <target name="drmaa-jar" depends="local-compile, make-jars-dir">

        <mkdir dir="${build.unzipped.dir}" />
        <unjar src="${basedir}/lib/drmaa.jar" dest="${build.unzipped.dir}" overwrite="true"/>

        <jar destfile="${build.jars.dir}/${drmaa.jar.name}">
            <fileset dir="${build.classes.dir}">
                <include name="org/janelia/it/jacs/compute/drmaa/*.class"/>
                <include name="org/janelia/it/jacs/compute/service/common/grid/submit/GridProcessResult.class"/>
                <include name="org/janelia/it/jacs/compute/service/common/grid/submit/sge/RemoteJobStatusLogger.class"/>
                <include name="org/janelia/it/jacs/compute/api/JobControlBeanRemote.class"/>
            </fileset>
            <fileset dir="${basedir}/conf/drmaa">
                <include name="**"/>
            </fileset>
            <fileset dir="${jacs.properties.dir}">
                <include name="jacs.properties"/>
            </fileset>
            <zipfileset src="${model.module}/build/jars/jacs-model.jar" excludes="META-INF/** meta-inf/**"/>
            <zipfileset src="${common.dir}/Spring/log4j-1.2.14.jar" excludes="META-INF/** meta-inf/**"/>
            <zipfileset src="${common.dir}/Spring/commons-logging.jar" excludes="META-INF/** meta-inf/**"/>
            <zipfileset src="${common.dir}/Spring/spring.jar" excludes="META-INF/** meta-inf/**"/>
            <zipfileset src="${common.dir}/GWT/gwt-servlet.jar" excludes="META-INF/** meta-inf/**"/>
            <zipfileset src="${common.dir}/Wildfly-10/jboss-client.jar" excludes="META-INF/** meta-inf/**"/>
            <!--<zipfileset src="${common.dir}/WildFly-10.0.0.Final/jbossall-client.jar" excludes="META-INF/** meta-inf/**"/>-->
            <!--<zipfileset src="${common.dir}/WildFly-10.0.0.Final/concurrent.jar" excludes="META-INF/** meta-inf/**"/>-->
        	
            <fileset dir="${build.unzipped.dir}">
                <include name="**/*.properties"/>
                <include name="com/**"/>
                <include name="org/**"/>
                <exclude name="META-INF/**" />
                <exclude name="meta-inf/**" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
            <metainf dir="${build.unzipped.dir}/META-INF">
                <include name="services/**"/>
            </metainf>
        </jar>

        <delete dir="${build.unzipped.dir}"/>

    </target>

    <target name="build-war" depends="local-jar, make-jars-dir">

        <war warfile="${basedir}/build/jars/${localname}.war" webxml="${basedir}/WEB-INF/web.xml">
            <classes dir="${build.classes.dir}">
                <include name="org/**/web/**/*.class"/>
            </classes>
            <fileset dir="${jacs.properties.dir}">
                <include name="jacs.properties"/>
            </fileset>
            <webinf dir="${condesc.dir}" includes="jboss-web.xml"/>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
        </war>

        <war warfile="${basedir}/build/jars/${secure-ws-war}" webxml="${basedir}/WEB-INF/secure-web-rest-ws.xml">
            <classes dir="${build.classes.dir}">
                <include name="org/**/wsrest/**/*.class"/>
            </classes>
            <fileset dir="${jacs.properties.dir}">
                <include name="jacs.properties"/>
            </fileset>
            <fileset dir="${basedir}/conf">
                <include name="ehcache2-jacs.xml"/>
                <include name="c3p0-nosql.json"/>
            </fileset>
            <fileset dir="${basedir}/webcontent">
                <include name="**/*"/>
            </fileset>
            <lib dir="${common.dir}/Directory">
                <include name="**/*.jar"/>
            </lib>
            <lib dir="${common.dir}/swagger">
                <include name="**/*.jar"/>
            </lib>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${DSTAMP} ${TSTAMP}"/>
            </manifest>
        </war>

    </target>

    <target name="dashboard-war" depends="local-compile, make-jars-dir">
    	
        <war warfile="${basedir}/build/jars/compute-dashboard.war" webxml="${basedir}/../dashboard/web.xml">
            <fileset dir="${basedir}/../dashboard/src">
                <include name="index.html"/>
                <include name="mouselight.html"/>
                <include name="css/*"/>
                <include name="img/*"/>
                <include name="js/*"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
        </war>

    </target>

    <target name="build-ear" depends="build-war, dashboard-war" description="builds the ear file">

        <!-- build .har file for Hibernate-service -->
        <jar jarfile="${basedir}/build/jars/${localname}.har">
            <fileset dir="${basedir}/../model/conf/hibernate_mappings">
              <include name="**/*.hbm.xml"/>
            </fileset>
            <fileset dir="${build.classes.dir}">
              <include name="org/janelia/it/jacs/model/**/*.class"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
            <metainf dir="${condesc.dir}" includes="hibernate-service.xml"/>
        </jar>

        <!-- build .sar file for StartupMBean -->
        <jar jarfile="${basedir}/build/jars/${localname}.sar">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
            <metainf dir="${condesc.dir}">
                <!--<include name="jboss-service.xml"/>-->
                <!--<include name="*-xmbean.xml"/>-->
                <include name="beans.xml"/>
            </metainf>
        </jar>

        <!-- build ejb client jar -->
        <jar jarfile="${basedir}/build/jars/${localname}-client.jar">
            <fileset dir="${build.classes.dir}">
                <include name="org/janelia/it/jacs/compute/api/EJBRemoteHome.class"/>
                <include name="org/janelia/it/jacs/compute/api/AnnotationBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/ComputeBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/EntityBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/SearchBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/SolrBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/GeometricSearchBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/ComputeException.class"/>
                <include name="org/janelia/it/jacs/compute/access/DaoException.class"/>
                <include name="org/janelia/it/jacs/compute/engine/launcher/LauncherException.class"/>
                <include name="org/janelia/it/jacs/compute/engine/service/ServiceException.class"/>
                <include name="org/janelia/it/jacs/compute/api/JobControlBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/TiledMicroscopeBeanRemote.class"/>
                <include name="org/janelia/it/jacs/compute/api/support/*.class"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
        </jar>

        <ear destfile="${build.jars.dir}/${localname}.ear" appxml="${condesc.dir}/application.xml">
            <fileset file="${basedir}/lib/drmaa.jar"/>
            <fileset file="${basedir}/build/jars/compute-dashboard.war"/>
            <fileset file="${basedir}/build/jars/${rest-ws-war}"/>
            <fileset file="${basedir}/build/jars/${secure-ws-war}"/>
            <fileset file="${basedir}/build/jars/${localname}.war"/>
            <fileset file="${basedir}/build/jars/${localname}.jar"/>
            <fileset file="${basedir}/build/jars/${localname}.sar"/>
            <fileset file="${basedir}/build/jars/${localname}.har"/>
        	<zipfileset file="${shared.module}/build/jars/jacs-shared.jar" prefix="lib"/>
            <zipfileset file="${model.module}/build/jars/jacs-model.jar" prefix="lib"/>
        	<zipfileset dir="${dep.dir}" prefix="lib"/>
            <fileset dir="${jacs.properties.dir}">
                <include name="jacs.properties"/>
            </fileset>
            <fileset dir="${basedir}/conf">
                <include name="ehcache2-jacs.xml"/>
            </fileset>
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Build-Date" value="${start.DSTAMP} ${start.TSTAMP}"/>
            </manifest>
            <metainf dir="${condesc.dir}" includes="jboss-app.xml"/>
            <metainf dir="${condesc.dir}" includes="persistence.xml"/>
            <!--<metainf dir="${condesc.dir}" includes="c3p0-service.xml"/>-->
            <metainf dir="${condesc.dir}" includes="beans.xml"/>
        </ear>

    </target>

    <target name="clean">
        <delete includeEmptyDirs="true">
            <fileset dir="${basedir}/build">
                <include name="*/**" />
            </fileset>
        </delete>
    </target>

    <!-- Defines the set of targets that should be run to completely build this module. -->
    <target name="build" depends="build-ear, drmaa-jar, test-jar">

    </target>

    <!-- deploys to app server area -->
    <target name="windows-deploy-[your-server]-dev" depends="setup" description="Deploy ear and jars to development server">
        <property name="server.address">${user.server.machine}</property>
        <!--<input message="Please enter server name (i.e. camdev2):" addproperty="server.address" defaultvalue=""/>-->
        <input message="[${server.address}] Please enter password:" addproperty="server.password" />

        <echo message="Checking ${jacs.properties.dir}/${server.address}.properties for existance" />
        <condition property="deployment-specific.properties.file.name"
                   value="${server.address}.properties"
                   else="notdefined.properties" >
            <available file="${jacs.properties.dir}/${server.address}.properties" />
        </condition>

        <!-- set connection params, and check connection -->
        <property name="ssh.common.params" value="${ssh.options} ${ssh.password.option} ${server.password} ${user.server.login}@${server.address}"/>
        <property name="scp.common.params" value="${scp.options} ${ssh.password.option} ${server.password}"/>
        <!--<property name="ssh.common.params" value="${server.username}@${server.address}"/>-->
        <!--<property name="scp.common.params" value=""/>-->

        <echo message="Overlay properties file: ${deployment-specific.properties.file.name}" />
        <antcall target="deploy-jboss-app">
            <param name="deployment-specific.properties.dir" value="${jacs.properties.dir}"/>
            <param name="deployment-specific.properties.file" value="${deployment-specific.properties.file.name}"/>
            <param name="server.username" value="${user.server.login}" />
        </antcall>
    </target>

    <target name="windows-deploy-[your-server]-secure-dev" depends="setup" description="Deploy ear and jars to development server.  Fails in IntelliJ">
        <property name="server.address">${user.server.machine}</property>

        <input message="Please enter password for ${user.server.machine}:" addproperty="server.password">
            <handler type="secure"/>
        </input>        
		
        <echo message="Checking ${jacs.properties.dir}/${server.address}.properties for existance" />
        <condition property="deployment-specific.properties.file.name"
                   value="${user.server.machine}.properties"
                   else="notdefined.properties" >
            <available file="${jacs.properties.dir}/${server.address}.properties" />
        </condition>

        <!-- set connection params, and check connection -->
        <property name="ssh.common.params" value="${ssh.options} ${ssh.password.option} ${server.password} ${user.server.login}@${server.address}"/>
        <property name="scp.common.params" value="${scp.options} ${ssh.password.option} ${server.password}"/>

        <echo message="Overlay properties file: ${deployment-specific.properties.file.name}" />
        <antcall target="deploy-jboss-app">
            <param name="deployment-specific.properties.dir" value="${jacs.properties.dir}"/>
            <param name="deployment-specific.properties.file" value="${deployment-specific.properties.file.name}"/>
            <param name="server.username" value="${user.server.login}" />
        </antcall>
    </target>

    <!-- deploys to app server area -->
    <target name="deploy-[your-server]-dev" depends="setup" description="Deploy ear and jars to development server">
        <!-- set connection params, and check connection -->
        <condition property="host.provided">
            <isset property="user.server.machine"/>
        </condition>
        <antcall target="setHost"/>
        <antcall target="getHost"/>
    </target>

    <target name="getHost" unless="host.provided" description="Ping the user for a host">
        <input message="Please enter server name or set your user.server.machine property:" addproperty="server.address" />
        <input message="Please enter password for saffordt:" addproperty="server.password" />
        <antcall target="deploy-server"/>
    </target>

    <target name="setHost" if="host.provided" description="Set the known host value">
        <echo message="Setting the host to ${user.server.machine}, provided by the user.properties file"/>
        <property name="server.address" value="${user.server.machine}"/>
        <echo message="server.address is now ${server.address}"/>
        <antcall target="deploy-server"/>
    </target>

    <target name="deploy-server" description="Push the server code to the host provided">
        <echo message="Checking ${jacs.properties.dir}/${server.address}.properties for existance" />
        <condition property="deployment-specific.properties.file.name"
                   value="${server.address}.properties"
                   else="notdefined.properties" >
            <available file="${jacs.properties.dir}/${server.address}.properties" />
        </condition>

        <echo message="Overlay properties file: ${deployment-specific.properties.file.name}" />
        <antcall target="deploy-jboss-app">
            <param name="ssh.common.params" value="${user.server.login}@${server.address}"/>
            <param name="scp.common.params" value=""/>
            <param name="server.username" value="${user.server.login}" />
            <param name="deployment-specific.properties.dir" value="${jacs.properties.dir}"/>
            <param name="deployment-specific.properties.file" value="${deployment-specific.properties.file.name}"/>
        </antcall>
    </target>

    <target name="deploy-jboss-app" depends="setup">

        <echo message="Testing connection" />
        <echo message="SSH Common Params ${ssh.common.params} for ${ssh}"/>
        <exec executable="${ssh}" description="Testing connection"
              outputproperty="exec.output" failonerror="true">
            <arg line="${ssh.common.params} ls -ld /tmp"/>
        </exec>

        <!-- need to load extra properties - they have needed paths -->
        <echo message="Reading deployment specific prop file: ${deployment-specific.properties.dir}/${deployment-specific.properties.file}" />
        <!-- merge in props file -->
        <!-- make temp dir -->
        <property name="temp.dir" value="${build.dir}/tmp" />
        <mkdir dir="${temp.dir}" />

        <!-- rebuild jacs.properties -->
        <!-- need to copy to circumvent bug in FileSet type - ordering of includes alphabetically, and not in order specified -->
        <copy file="${jacs.properties.dir}/jacs.properties" tofile="${temp.dir}/000-jacs.properties" />
        <copy file="${jacs.properties.dir}/${deployment-specific.properties.file}" tofile="${temp.dir}/${deployment-specific.properties.file}" />
        <properties file="${temp.dir}/jacs.properties">
          <header>
            Ant-generated file
          </header>
            <!--
              merge all property files in directory deploy
            -->
          <merge dir="${temp.dir}" >
              <include name="000-jacs.properties" />
              <include name="${deployment-specific.properties.file}"/>
          </merge>
        </properties>

        <!-- read in properties -->
        <property file="${temp.dir}/jacs.properties" prefix="FromPropFile"/>
        <property name="jboss.home" value="${FromPropFile.ServerRoot.Dir}/wildfly-10.0.0.Final" />
	    <property name="startjbossscript" value="${FromPropFile.ServerStartScript}" />

        <echo message="computeserver.ejb.service = ${FromPropFile.computeserver.ejb.service}" />

        <!--build drmaa file -->
        <antcall target="build">
           <param name="jacs.properties.dir" value="${temp.dir}"/>
        </antcall>

        <!--stop jboss server and give it time to shutdown-->
        <sequential >
            <echo message="Shutting down JBoss...(/groups/jacs/jacsHosts/bin/stopwildfly.sh ${jboss.home} ${FromPropFile.computeserver.ejb.service})" />
            <exec executable="${ssh}" description="Shutting down Jboss"
                  outputproperty="exec.output" errorproperty="exec.error">
                <arg line="${ssh.common.params} /groups/jacs/jacsHosts/bin/stopwildfly.sh ${jboss.home} ${FromPropFile.computeserver.ejb.service}"/>
            </exec>
            <echo message="Done : ${exec.output}"  />
            <echo message="Done : ${exec.error}"  />
        </sequential>

        <property name="Grid.Jar.Path" value="${FromPropFile.Grid.Lib.Path}/${FromPropFile.Grid.Jar.Name}"/>
        <property name="Drmaa.Submitter.Jar.Path" value="${FromPropFile.Local.Lib.Path}/${FromPropFile.Drmaa.Submitter.Jar.Name}"/>
        <property name="Drmaa.Submitter.Script.Path" value="${FromPropFile.Local.Lib.Path}/${FromPropFile.Drmaa.Submitter.Script.Name}"/>

        <!--clean out files -->
        <echo message="Removing remote ear file" />
        <exec executable="${ssh}" description="Removing application directory">
            <arg line="${ssh.common.params} rm -fr ${jboss.home}/standalone/deployments/${localname}.ear*"/>
        </exec>
        <echo message="Removing libs: ${ssh} ${ssh.common.params} rm -fr ${Grid.Jar.Path} ${Drmaa.Submitter.Jar.Path} ${Drmaa.Submitter.Script.Path} "/>
        <exec executable="${ssh}" description="Removing GridMergeSort jar">
            <arg line="${ssh.common.params} rm -f ${Grid.Jar.Path} ${Drmaa.Submitter.Jar.Path} ${Drmaa.Submitter.Script.Path}"/>
        </exec>

         <!--copy ear file -->
        <echo message="Copying ${temp.dir}/${localname}.ear file to server ${server.username}@${server.address}:${jboss.home}/standalone/deployments/${localname}.ear" />
        <exec executable="${scp}" description="Publishing ear file">
            <arg line="${scp.common.params} ${build.jars.dir}/${localname}.ear ${server.username}@${server.address}:${jboss.home}/standalone/deployments/${localname}.ear"/>
        </exec>

         <!--copy jars -->
        <echo message="Copying libs to server: ${scp} ${scp.common.params} ${shared.module}/build/jars/jacs-grid.jar ${server.username}@${server.address}:${Grid.Jar.Path}" />
        <exec executable="${scp}">
            <arg line="${scp.common.params} ${shared.module}/build/jars/jacs-grid.jar ${server.username}@${server.address}:${Grid.Jar.Path}"/>
        </exec>
        <exec executable="${scp}">
            <arg line="${scp.common.params} ${build.jars.dir}/${drmaa.jar.name} ${server.username}@${server.address}:${Drmaa.Submitter.Jar.Path}"/>
        </exec>
        <exec executable="${scp}">
            <arg line="${scp.common.params} ${basedir}/scripts/${FromPropFile.Drmaa.Submitter.Script.Name} ${server.username}@${server.address}:${Drmaa.Submitter.Script.Path}"/>
        </exec>
        <exec executable="${ssh}">
            <arg line="${ssh.common.params} chmod 777 ${Drmaa.Submitter.Script.Path}"/>
        </exec>

         <!--restart JBoss -->
    	<sleep seconds="2"/>
        <echo message="Starting JBoss: ${startjbossscript} ${jboss.home} ${server.address}" />
        <exec executable="${ssh}" description="Starting Jboss (${startjbossscript} ${jboss.home} ${server.address})"
              outputproperty="exec.output" errorproperty="exec.error">
            <arg line="${ssh.common.params} ${startjbossscript} ${jboss.home} ${server.address}"/>
        </exec>
        <echo message="Done : ${exec.output}"  />
        <echo message="Done : ${exec.error}"  />

         <!--remove temp files
         <delete dir="${temp.dir}"/>
          -->
    </target>

    <target name="build-and-deploy" depends="build,deploy-[your-server]-dev" description="Build and deploy">
	</target>
    
</project>
