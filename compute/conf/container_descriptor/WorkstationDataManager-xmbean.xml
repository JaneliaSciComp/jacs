<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mbean PUBLIC
          "-//JBoss//DTD JBOSS XMBEAN 1.0//EN"
          "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd">
<mbean>

    <description>Workstation Management Bean</description>
    <class>org.janelia.it.jacs.compute.mbean.WorkstationDataManager</class>
    <constructor>
        <description>The default constructor</description>
        <name>WorkstationDataManager</name>
    </constructor>

    <operation>
        <description>Load in Arnim's annotations from Picasa.</description>
        <name>runAnnotationImport</name>
        <parameter>
           <description>User to run as (e.g. "flylight")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Path to annotations file which annotates fly specimens with a list of annotations (e.g. "/groups/scicomp/jacsData/SplitPicking/annotations.txt")</description>
           <name>annotationsPath</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of the ontology to use, or create if it doesn't exist (e.g. "Picasa Imported Ontology")</description>
           <name>ontologyName</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Load in the screen intensity and distribution scores as annotations, and create a folder structure to organize them.</description>
        <name>runScreenScoresLoading</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of accepts file to read from (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/finalAccepts.txt")</description>
           <name>acceptsPath</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of file to write to (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/loaded.txt")</description>
           <name>loadedFile</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Export the screen intensity and distribution scores.</description>
        <name>runScreenScoresExport</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path for the output file (e.g. "/groups/scicomp/jacsData/rokickiTest/scoreExport.txt")</description>
           <name>outputFilepath</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Load in Arnim's representatives and split constructs spreadsheets and combine them with the screen data into a new hierarchy for split line representative determination.</description>
        <name>runSplitLinesLoading</name>
        <parameter>
           <description>User to run as (e.g. "flylight")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of top level folder for split lines (e.g. "FlyLight Screen Split Constructs")</description>
           <name>topLevelFolderName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Path to representatives file which picks a representative specimen for each flyline (e.g. "/groups/scicomp/jacsData/SplitPicking/representatives.txt")</description>
           <name>representativesPath</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Path to split constructs file which annotates flylines with an AD or DBD designation (e.g. "/groups/scicomp/jacsData/SplitPicking/splitReps.txt")</description>
           <name>splitConstructsPath</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize Neo4j to the database</description>
        <name>runNeo4jSync</name>
        <parameter>
           <description>Clear the Neo4j database first?</description>
           <name>clearDb</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize the MongoDb to the database</description>
        <name>runMongoDbSync</name>
        <parameter>
           <description>Clear the MongoDB first?</description>
           <name>clearDb</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize the SOLR indexes to the database</description>
        <name>runSolrIndexSync</name>
        <parameter>
           <description>Clear the index first?</description>
           <name>clearIndex</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Trigger SOLR indexing for every entity in a given tree</description>
        <name>runSolrTreeIndexing</name>
        <parameter>
           <description>Entity id of the root of the tree</description>
           <name>rootId</name>
           <type>java.lang.Long</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Check for orphan annotations, and possibly delete them.</description>
        <name>runOrphanAnnotationCheckerService</name>
        <parameter>
           <description>User to run as (e.g. "flylight")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should we delete annotations which have nonexistent targets?</description>
           <name>deleteAnnotationsMissingTargets</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Should we delete annotations which have nonexistent ontology terms?</description>
           <name>deleteAnnotationsMissingTerms</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Upgrade the entire data model to use the most current entity structure.</description>
        <name>runUpgradeData</name>
    </operation>
    
    <operation>
        <description>Upgrade the given user's data model to use the most current entity structure.</description>
        <name>runUpgradeUserData</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Upgrade the given sample to the current entity structure. In this release, the sample id is ignored, and the method is equivalent to runUpgradeUserData.</description>
        <name>runUpgradeSingleSample</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    
    <operation>
        <description>Change the owner of the entity tree rooted at the given entity.</description>
        <name>annexEntityTree</name>
        <parameter>
           <description>Subject key of the new owner (e.g. "user:saffordt")</description>
           <name>subjectKey</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Identifier of the root entity (e.g. "1679282451010027618")</description>
           <name>entityId</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run the FlyScreen Pipeline</description>
        <name>runFlyScreenPipeline</name>
        <parameter>
           <description>User to run as (e.g. "flylight")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run the Samples that already have results?</description>
           <name>refresh</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
         <description>Run the FlyScreen Pattern Annotation Pipeline</description>
         <name>runFlyScreenPatternAnnotationPipeline</name>
         <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
         </parameter>
         <parameter>
            <description>Re-run the Samples that already have results?</description>
            <name>refresh</name>
            <type>java.lang.Boolean</type>
         </parameter>
     </operation>

    <operation>
        <description>Perform custom surgery on Screen Pipeline results, by user</description>
        <name>performScreenPipelineSurgery</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the File Tree Loader Pipeline</description>
        <name>runFileTreeLoaderPipeline</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Root directory path of tree to import</description>
            <name>rootDirectoryPath</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Name for top-level folder in Workstation</description>
            <name>topLevelFolderName</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <!-- Added by Les Foster (fosterl) on 5.1.2013 -->
        <description>Load Mask-Channel Compartment Files to DB Entities</description>
        <name>runCompartmentLoading</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Directory path of compartment mask-channel files to import (e.g. /groups/scicomp/jacsData/filestore/MaskResources/Compartment/A_DIRECTORY_CONTAINING_MASK_CHAN_DATA).</description>
            <name>maskChanPath</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Name for top-level folder in Workstation (e.g., /compartmentMaskChan1024x512x218 or /compartmentMaskChan1712x1370x492).</description>
            <name>topLevelFolderName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Optical resolution (e.g., 0.62x0.62x0.62 or 0.38x0.38x0.38).</description>
            <name>opticalResolution</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Pixel resolution (e.g., 1024x512x218 or 1712x1370x492).</description>
            <name>pixelResolution</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>createPatternAnnotationQuantifierSummaryFile</description>
        <name>createPatternAnnotationQuantifierSummaryFile</name>
    </operation>

    <operation>
        <description>Run the Transcription Imaging Consortium Pipeline</description>
        <name>runTicPipeline</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>input file directory</description>
            <name>dirOfInputFile</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>input file name</description>
            <name>inputFileName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>transformation matrix file</description>
            <name>transformationMatrixFile</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>border value (may be blank)</description>
            <name>borderValue</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>correction file path</description>
            <name>correctionFile</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Create Mask Summary File</description>
        <name>createMaskSummaryFile</name>
        <parameter>
            <description>Mask folder name</description>
            <name>maskFolderName</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the Mask Annotation Pipeline</description>
        <name>runMaskAnnotationPipeline</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Mask Folder Name</description>
            <name>maskFolderName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Re-run the Samples that already have results?</description>
            <name>refresh</name>
            <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the Mask Guide Service</description>
        <name>runMaskGuideService</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Mask Folder Name</description>
            <name>maskFolderName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Refresh prior data?</description>
            <name>refresh</name>
            <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the Neuron Merge Service</description>
        <name>runNeuronMergeTest</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>taskOwner</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Separation Entity Id</description>
            <name>separationEntityId</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Comma Separated List of Neuron Fragments</description>
            <name>commaSeparatedNeuronFragmentList</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Slow Import Service</description>
        <name>runSlowImportTask</name>
        <parameter>
            <description>Root path to directory</description>
            <name>parentDirPath</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Top level folder name target</description>
            <name>topLevelFolderName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Import owner</description>
            <name>owner</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the ArnimPatternAnnotationFinisher</description>
        <name>runArnimPatternAnnotationFinisher</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>DeDuper</description>
        <name>runDataDeDuplication</name>
    </operation>

    <operation>
        <description>Add Sample Folders to 3D Tile Microscope Samples</description>
        <name>create3DTileMicroscopeSamples</name>
        <parameter>
            <description>Subject Login</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Name of the destination folder</description>
            <name>destinationFolderName</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Add a child Folder to an Entity</description>
        <name>addChildFolder</name>
        <parameter>
            <description>Entity id of the parent entity</description>
            <name>parentId</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Name of the new folder</description>
            <name>folderName</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
</mbean>
