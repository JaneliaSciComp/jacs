<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mbean PUBLIC
          "-//JBoss//DTD JBOSS XMBEAN 1.0//EN"
          "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd">
<mbean>

    <description>Workstation Management Bean</description>
    <class>org.janelia.it.jacs.compute.mbean.WorkstationDataManager</class>
    <constructor>
        <description>The default constructor</description>
        <name>WorkstationDataManager</name>
    </constructor>

    <operation>
        <description>Load in Arnim's annotations from Picasa.</description>
        <name>runAnnotationImport</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Path to annotations file which annotates fly specimens with a list of annotations (e.g. "/groups/scicomp/jacsData/SplitPicking/annotations.txt")</description>
           <name>annotationsPath</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of the ontology to use, or create if it doesn't exist (e.g. "Picasa Imported Ontology")</description>
           <name>ontologyName</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Load in the screen intensity and distribution scores as annotations, and create a folder structure to organize them.</description>
        <name>runScreenScoresLoading</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of accepts file to read from (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/finalAccepts.txt")</description>
           <name>acceptsPath</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of file to write to (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/loaded.txt")</description>
           <name>loadedFile</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Load in the screen intensity and distribution scores for ArnimUpdate1.</description>
        <name>runScreenScoresLoading2</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of accepts file to read from (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/accepts.txt")</description>
           <name>acceptsPath</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Remove rejected specimens from the evaluation area.</description>
        <name>runScreenScoresLoading3</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of rejects file to read from (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/rejects.txt")</description>
           <name>rejectsPath</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of accepts file to write to (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/accepts.txt")</description>
           <name>acceptsPath</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Re-add specimens to the evaluation area.</description>
        <name>runScreenScoresLoading4</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path of adds file to read from (e.g. "/groups/scicomp/jacsData/PipelineInputFiles/ScreenEvaluation/adds.txt")</description>
           <name>addsPath</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Creates a parallel hierarchy of scored split line representatives.</description>
        <name>runScreenScoresLoading5</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Compartments to load, empty means all (e.g. "FB,EB,NO")</description>
           <name>compartmentList</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    
    <operation>
        <description>Export the screen intensity and distribution scores.</description>
        <name>runScreenScoresExport</name>
        <parameter>
           <description>User to run as (e.g. "jenetta")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Full path for the output file (e.g. "/groups/scicomp/jacsData/rokickiTest/scoreExport.txt")</description>
           <name>outputFilepath</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Load in Arnim's representatives and split constructs spreadsheets and combine them with the screen data into a new hierarchy for split line representative determination.</description>
        <name>runSplitLinesLoading</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of top level folder for split lines (e.g. "FlyLight Screen Split Constructs")</description>
           <name>topLevelFolderName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Path to representatives file which picks a representative specimen for each flyline (e.g. "/groups/scicomp/jacsData/SplitPicking/representatives.txt")</description>
           <name>representativesPath</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Path to split constructs file which annotates flylines with an AD or DBD designation (e.g. "/groups/scicomp/jacsData/SplitPicking/splitReps.txt")</description>
           <name>splitConstructsPath</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize Neo4j to the database</description>
        <name>runNeo4jSync</name>
        <parameter>
           <description>Clear the Neo4j database first?</description>
           <name>clearDb</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize the MongoDb to the database</description>
        <name>runMongoDbSync</name>
        <parameter>
           <description>Clear the MongoDB first?</description>
           <name>clearDb</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize the SOLR indexes to the database</description>
        <name>runSolrIndexSync</name>
        <parameter>
           <description>Clear the index first?</description>
           <name>clearIndex</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Trigger SOLR indexing for every entity in a given tree</description>
        <name>runSolrTreeIndexing</name>
        <parameter>
           <description>Entity id of the root of the tree</description>
           <name>rootId</name>
           <type>java.lang.Long</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Check for orphan annotations, and possibly delete them.</description>
        <name>runOrphanAnnotationCheckerService</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should we delete annotations which have nonexistent targets?</description>
           <name>deleteAnnotationsMissingTargets</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Should we delete annotations which have nonexistent ontology terms?</description>
           <name>deleteAnnotationsMissingTerms</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Clean old, non-annotated results from Sample entities. WARNING: this depends heavily on the Solr index, and should be run at an off-peak time, directly after runSolrIndexSync.</description>
        <name>runSampleCleaningService</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should this run as a test without making any real changes?</description>
           <name>testRun</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize the given user's Sample fileshare with the database</description>
        <name>runSampleSyncService</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should this run as a test without making any real changes?</description>
           <name>testRun</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Synchronize the given user's Samples with their most recent results</description>
        <name>runSampleImageSync</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Compress all of the user's v3draw files to v3dpbd</description>
        <name>runMCFODataCompress</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should this run as a test without making any real changes?</description>
           <name>testRun</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Upgrade the given user's MCFO results to use the most current entity structure</description>
        <name>runMCFODataUpgrade</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should this run as a test without making any real changes?</description>
           <name>testRun</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run routine maintenance tasks on all the user's Samples</description>
        <name>runSampleMaintenancePipeline</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Create the fastLoad artifacts for a single neuron separation</description>
        <name>runSingleFastLoadArtifactPipeline</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Entity id of the neuron separation result entity</description>
           <name>separationEntityId</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Create the fastLoad artifacts for all single neuron separations</description>
        <name>runCompleteFastLoadArtifactPipeline</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run all pipelines for all Data Sets for all users</description>
        <name>runAllDataSetPipelines</name>
    </operation>
    
    <operation>
        <description>Run all pipelines for all Data Sets for a particular user</description>
        <name>runUserDataSetPipelines</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>username</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run all the pipelines configured for a particular Sample</description>
        <name>runSamplePipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    
    <operation>
        <description>Run a specific pipeline for a single Sample</description>
        <name>runConfiguredSamplePipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of configuration (e.g. "FlyLightOpticLobe" will select the process file named "PipelineConfig_FlyLightOpticLobe.process")</description>
           <name>configurationName</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run Leet SAGE-based Data Pipeline</description>
        <name>runLeetDataPipeline</name>
        <parameter>
           <description>User to run as (e.g. "leetlab")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of the folder entity where results will be placed (e.g. "Pan Lineage Samples")</description>
           <name>topLevelFolderName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of the image family to load (e.g. "leet_pan_lineage")</description>
           <name>imageFamily</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run merging and stitching?</description>
           <name>refreshProcessing</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run brain alignments?</description>
           <name>refreshAlignment</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run the Leet Sample Pipeline for a single Sample</description>
        <name>runLeetSamplePipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run merging and stitching?</description>
           <name>refreshProcessing</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run brain alignments?</description>
           <name>refreshAlignment</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run Central Brain Pipeline</description>
        <name>runCentralBrainDataPipeline</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of the folder entity where results will be placed (e.g. "FlyLight Single Neuron Samples")</description>
           <name>topLevelFolderName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run merging and stitching?</description>
           <name>refreshProcessing</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run brain alignments?</description>
           <name>refreshAlignment</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run neuron separations?</description>
           <name>refreshSeparation</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run the entire Whole Brain 63x Alignment Pipeline</description>
        <name>runAlignWholeBrainDataPipeline</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run brain alignments?</description>
           <name>refreshAlignment</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run neuron separations?</description>
           <name>refreshSeparation</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run the Whole Brain 63x Alignment Pipeline for a single Sample</description>
        <name>runAlignWholeBrainSamplePipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run brain alignments?</description>
           <name>refreshAlignment</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run neuron separations?</description>
           <name>refreshSeparation</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run the entire Two Channel Pipeline</description>
        <name>runTwoChanDataPipeline</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the Two Channel Pipeline for a single Sample</description>
        <name>runTwoChanSamplePipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run the entire MCFO Data Pipeline</description>
        <name>runMCFODataPipeline</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of the folder entity where results will be placed (e.g. "FlyLight Single Neuron Samples")</description>
           <name>topLevelFolderName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run merging and stitching?</description>
           <name>refreshProcessing</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run brain alignments?</description>
           <name>refreshAlignment</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run neuron separations?</description>
           <name>refreshSeparation</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the MCFO Sample Pipeline for a single Sample</description>
        <name>runMCFOSamplePipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run merging and stitching?</description>
           <name>refreshProcessing</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run brain alignments?</description>
           <name>refreshAlignment</name>
           <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>Re-run neuron separations?</description>
           <name>refreshSeparation</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the MCFO Separation Pipeline for a single input file</description>
        <name>runMCFOSeparationPipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Input filename to run the separator on (e.g. "/groups/scicomp/jacsData/filestore/system/Sample/1681147037363486818/stitch/stitched-1681061667699425378.v3draw")</description>
           <name>inputFilename</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>The name of the result entity to create under the Sample (e.g. "Prealigned Neuron Separation")</description>
           <name>resultEntityName</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Create or update an MCFO sample view</description>
        <name>runMCFOSampleViewCreation</name>
        <parameter>
           <description>Id of the entity to search for completed Samples (e.g. "1679282451010027618")</description>
           <name>sourceEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of the result view entity to create or update (e.g. "FlyLight Single Neuron Samples")</description>
           <name>targetEntityName</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run the FlyScreen Pipeline</description>
        <name>runFlyScreenPipeline</name>
        <parameter>
           <description>User to run as (e.g. "system")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Re-run the Samples that already have results?</description>
           <name>refresh</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
         <description>Run the FlyScreen Pattern Annotation Pipeline</description>
         <name>runFlyScreenPatternAnnotationPipeline</name>
         <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
         </parameter>
         <parameter>
            <description>Re-run the Samples that already have results?</description>
            <name>refresh</name>
            <type>java.lang.Boolean</type>
         </parameter>
     </operation>

    <operation>
        <description>Load entity types from Java class AnnotationDAO</description>
        <name>setupEntityTypes</name>
    </operation>

    <operation>
        <description>Perform custom surgery on Screen Pipeline results, by user</description>
        <name>performScreenPipelineSurgery</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the File Tree Loader Pipeline</description>
        <name>runFileTreeLoaderPipeline</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Root directory path of tree to import</description>
            <name>rootDirectoryPath</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Name for top-level folder in Workstation</description>
            <name>topLevelFolderName</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>createPatternAnnotationQuantifierSummaryFile</description>
        <name>createPatternAnnotationQuantifierSummaryFile</name>
    </operation>

    <operation>
        <description>Run the Transcription Imaging Consortium Pipeline</description>
        <name>runTicPipeline</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>input file directory</description>
            <name>dirOfInputFile</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>input file name</description>
            <name>inputFileName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>transformation matrix file</description>
            <name>transformationMatrixFile</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>border value (may be blank)</description>
            <name>borderValue</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>correction file path</description>
            <name>correctionFile</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Create Mask Summary File</description>
        <name>createMaskSummaryFile</name>
        <parameter>
            <description>Mask folder name</description>
            <name>maskFolderName</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the Mask Annotation Pipeline</description>
        <name>runMaskAnnotationPipeline</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Mask Folder Name</description>
            <name>maskFolderName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Re-run the Samples that already have results?</description>
            <name>refresh</name>
            <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the Mask Guide Service</description>
        <name>runMaskGuideService</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Mask Folder Name</description>
            <name>maskFolderName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Refresh prior data?</description>
            <name>refresh</name>
            <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the Neuron Merge Service</description>
        <name>runNeuronMergeTest</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>taskOwner</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Separation Entity Id</description>
            <name>separationEntityId</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Comma Separated List of Neuron Fragments</description>
            <name>commaSeparatedNeuronFragmentList</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Slow Import Service</description>
        <name>runSlowImportTask</name>
        <parameter>
            <description>Root path to directory</description>
            <name>parentDirPath</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Top level folder name target</description>
            <name>topLevelFolderName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Import owner</description>
            <name>owner</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Run the ArnimPatternAnnotationFinisher</description>
        <name>runArnimPatternAnnotationFinisher</name>
        <parameter>
            <description>User to run as (e.g. "system")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

</mbean>
