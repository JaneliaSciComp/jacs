<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mbean PUBLIC
          "-//JBoss//DTD JBOSS XMBEAN 1.0//EN"
          "http://www.jboss.org/j2ee/dtd/jboss_xmbean_1_0.dtd">
<mbean>

    <description>Sample Management Bean</description>
    <class>org.janelia.it.jacs.compute.mbean.SampleDataManager</class>
    <constructor>
        <description>The default constructor</description>
        <name>SampleDataManager</name>
    </constructor>

    <operation>
        <description>Run routine maintenance tasks on all Samples for all users: Clean old results (keep last error, last good run), sync file share to db, compress v3draw files</description>
        <name>runAllSampleMaintenancePipelines</name>
    </operation>
    
    <operation>
        <description>Run routine maintenance tasks on all the user's Samples</description>
        <name>runUserSampleMaintenancePipelines</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Clean old, non-annotated results from Sample entities. WARNING: this depends heavily on the Solr index, and should be run at an off-peak time, directly after runSolrIndexSync.</description>
        <name>runSampleCleaning</name>
        <parameter>
           <description>User to run as (e.g. "flylight")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should this run as a test without making any real changes?</description>
           <name>testRun</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Synchronize the given user's Sample fileshare with the database</description>
        <name>runSampleTrashCompactor</name>
        <parameter>
           <description>User to run as (e.g. "flylight")</description>
           <name>user</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Should this run as a test without making any real changes?</description>
           <name>testRun</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>

    <operation>
        <description>Compress samples for all users</description>
        <name>runAllSampleDataCompression</name>
        <parameter>
            <description>The compression level (e.g. "Visually Lossless and PBD")</description>
            <name>compressionType</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Compress a user's samples</description>
        <name>runSampleDataCompression</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Data Set Name (e.g. "Cell Count" or leave empty to run all data sets for the user)</description>
            <name>dataSetName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>The compression level (e.g. "Visually Lossless and PBD")</description>
           <name>compressionType</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Compress the given sample to a target compression level</description>
        <name>runSingleSampleDataCompression</name>
        <parameter>
           <description>Entity id of the Sample to run (e.g. "1679282451010027618")</description>
           <name>sampleId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>The compression level (e.g. "Visually Lossless and PBD")</description>
           <name>compressionType</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Register all images for a user's samples. Set/Correct all Default images as defined by Data Set</description>
        <name>runSampleImageRegistration</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Retire all the samples which are in "Desync" status for the given user</description>
        <name>runSampleRetirement</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Retire all the samples which are in "Desync" status for the all users</description>
        <name>runSampleRetirement</name>
    </operation>
    
    <operation>
        <description>Archive the given sample</description>
        <name>runSingleSampleArchival</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Archive all samples for a given user</description>
        <name>runCompleteSampleArchival</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Move the files for the given sample to Scality</description>
        <name>runSyncSampleToScality</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>File types to move (comma-delimited list including any of [lsm,pbd])</description>
           <name>fileTypes</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Move the files for the matching samples for a given user to Scality</description>
        <name>runSyncDataSetToScality</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Data Set Name (e.g. "Cell Count" or leave empty to run all data sets for the user)</description>
            <name>dataSetName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>File types to move (comma-delimited list including any of [lsm,pbd])</description>
           <name>fileTypes</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
     
    <operation>
        <description>Cancel all incomplete tasks for all users with data set pipelines</description>
        <name>cancelAllIncompleteDataSetPipelineTasks</name>
    </operation>
    
    <operation>
        <description>Run all pipelines for all Data Sets for all users</description>
        <name>runAllDataSetPipelines</name>
        <parameter>
            <description>Mode(s) for processing (NEW, ERROR, MARKED, ALL, NONE)</description>
            <name>runMode</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Reuse previous sample processing results</description>
            <name>reuseProcessing</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous alignment results</description>
            <name>reuseAlignment</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Force pipeline to run even if a previous one has not finished</description>
            <name>force</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <return-type>java.lang.String</return-type>
    </operation>
    
    <operation>
        <description>Run all pipelines for all Data Sets for a particular user</description>
        <name>runUserDataSetPipelines</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Data Set Name (e.g. "Cell Count" or leave empty to run all data sets for the user)</description>
            <name>dataSetName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Run sample discovery (synchronize to SAGE) before running samples</description>
            <name>runSampleDiscovery</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Mode(s) for processing (NEW, ERROR, MARKED, ALL, NONE)</description>
            <name>runMode</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Reuse existing pipeline runs</description>
            <name>reusePipelineRuns</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous sample processing results (if reusePipelineRuns is false)</description>
            <name>reuseProcessing</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous alignment results (if reusePipelineRuns is false)</description>
            <name>reuseAlignment</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Force pipeline to run even if a previous one has not finished</description>
            <name>force</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <return-type>java.lang.String</return-type>
    </operation>
    
    <operation>
        <description>Run all the pipelines configured for all the Samples in a given Folder</description>
        <name>runSampleFolder</name>
        <parameter>
           <description>Entity id of the Folder to run (e.g. "1679282451010027618")</description>
           <name>folderId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Reuse existing pipeline runs</description>
            <name>reusePipelineRuns</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous sample processing results (if reusePipelineRuns is false)</description>
            <name>reuseProcessing</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous alignment results (if reusePipelineRuns is false)</description>
            <name>reuseAlignment</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>One extra parameter to provide to the process. Must be formatted as "key=value".</description>
           <name>extraParams</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run all the pipelines configured for a particular Sample</description>
        <name>runSamplePipelines</name>
        <parameter>
           <description>Entity id of the Sample to run (e.g. "1679282451010027618")</description>
           <name>sampleId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Reuse existing pipeline runs</description>
            <name>reusePipelineRuns</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous sample processing results (if reusePipelineRuns is false)</description>
            <name>reuseProcessing</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous alignment results (if reusePipelineRuns is false)</description>
            <name>reuseAlignment</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
           <description>One extra parameter to provide to the process. Must be formatted as "key=value".</description>
           <name>extraParams</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run a specific pipeline for a single Sample</description>
        <name>runConfiguredSamplePipeline</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Name of configuration (e.g. "FlyLightOpticLobe" will select the process file named "PipelineConfig_FlyLightOpticLobe.process")</description>
           <name>configurationName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Reuse previous sample processing results</description>
            <name>reuseProcessing</name>
            <type>java.lang.Boolean</type>
        </parameter>
        <parameter>
            <description>Reuse previous alignment results</description>
            <name>reuseAlignment</name>
            <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Apply the given process file to every sample in the data set</description>
        <name>applyProcessToDataset</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Data Set Name (e.g. "Cell Count" or leave empty to run all data sets for the user)</description>
            <name>dataSetName</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Include parent samples or children samples, a.k.a subsamples (e.g. "parent" or "children")</description>
            <name>parentOrChildren</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Process file name (e.g. "PostPipeline_AddVerifyMovie")</description>
           <name>processName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>One extra parameter to provide to the process. Must be formatted as "key=value".</description>
           <name>extraParams</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Apply the given process file to the sample</description>
        <name>applyProcessToSample</name>
        <parameter>
           <description>Entity id of the sample to run (e.g. "1679282451010027618")</description>
           <name>sampleEntityId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Process file name (e.g. "PostPipeline_AddVerifyMovie")</description>
           <name>processName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>One extra parameter to provide to the process. Must be formatted as "key=value".</description>
           <name>extraParams</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
        
    <operation>
        <description>Apply the given process file to the samples in the given folder</description>
        <name>applyProcessToSamplesInFolder</name>
        <parameter>
           <description>Entity id of the Folder to run (e.g. "1679282451010027618")</description>
           <name>folderId</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Process file name (e.g. "PostPipeline_AddVerifyMovie")</description>
           <name>processName</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>One extra parameter to provide to the process. Must be formatted as "key=value".</description>
           <name>extraParams</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Run a separation for a given result entity</description>
        <name>runNeuronSeparationPipeline</name>
        <parameter>
           <description>Entity id of the result to run (e.g. "1679282451010027618")</description>
           <name>resultEntityId</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Generate a mapping between two neuron separations</description>
        <name>runNeuronSeparationMapping</name>
        <parameter>
           <description>Entity id of the old separation result (e.g. "1679282451010027618")</description>
           <name>separationId1</name>
           <type>java.lang.String</type>
        </parameter>
        <parameter>
           <description>Entity id of the new separation result (e.g. "1679282451010027618")</description>
           <name>separationId2</name>
           <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Repair any neuron separations which are incomplete</description>
        <name>runRepairSeparationsPipeline</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>Repair all neuron separations results</description>
        <name>runRepairSeparationResultsPipeline</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Restores files which were put into Scality but shouldn't have been</description>
        <name>runScalityCorrectionService</name>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>
    
    <operation>
        <description>BZip2 input LSM's defined in an ls'd file</description>
        <name>bzipLSMCompressionService</name>
        <parameter>
            <description>Path to the ls'd file</description>
            <name>filePath</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>User to run as (e.g. "flylight")</description>
            <name>owner</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Compression Mode (compress or decompress)</description>
            <name>compressMode</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Fixing h5j's to have padding</description>
        <name>visuallyLosslessCorrectionService</name>
        <parameter>
            <description>Path to the file with h5j paths</description>
            <name>filePath</name>
            <type>java.lang.String</type>
        </parameter>
        <parameter>
            <description>Debug flag</description>
            <name>debug</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Export artifacts for all annotated samples to SAGE</description>
        <name>runSageArtifactExport</name>
        <parameter>
            <description>User to run as (e.g. "asoy")</description>
            <name>user</name>
            <type>java.lang.String</type>
        </parameter>
    </operation>

    <operation>
        <description>Export Qi/Qm scores for all aligned 20x samples to SAGE</description>
        <name>runSageQiScoreSync</name>
        <parameter>
           <description>Should this run as a test without making any real changes?</description>
           <name>testRun</name>
           <type>java.lang.Boolean</type>
        </parameter>
    </operation>
    
</mbean>
