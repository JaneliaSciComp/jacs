 <!-- 
      Run a brain alignment algorithm on a given input file for a given sample. 
 -->
 <process name="FlyLight Alignment Pipeline" processor="queue/alignmentPipelineLauncher" startEvent="pending" updateProcessStatus="on_success">
	<sequence>

		<input name="PIPELINE_RUN_ENTITY_ID"/>
		<input name="SAMPLE_ENTITY_ID"/>
		<input name="OBJECTIVE"/>
        <input name="PARAMETERIZED_ALIGNMENT_ALGORITHM"/>
		<input name="SAMPLE_AREAS"/>
        <input name="RUN_ALIGNMENT"/>
        <input name="RUN_ANALYSIS"/>
        <input name="ANALYSIS_ALGORITHM"/>
        <input name="REUSE_ALIGNMENT"/>
        
        <sequence if="REUSE_ALIGNMENT=true">
            
            <!-- Reuse sample processing from previous pipeline run -->
            <operation name="Reuse Alignment Entity" processor="org.janelia.it.jacs.compute.service.domain.alignment.ReuseAlignmentResultService">
                <input name="SAMPLE_ENTITY_ID"/>
                <input name="OBJECTIVE"/>
                <input name="PIPELINE_RUN_ENTITY_ID"/>
                <input name="PARAMETERIZED_ALIGNMENT_ALGORITHM"/>
                <output name="RUN_ALIGNMENT"/>
            </operation>
            
        </sequence>
        
        <sequence if="RUN_ALIGNMENT=true">
        
    	    <!-- Create a alignment result node, with nested result nodes for all the pipeline steps -->
    	    <operation name="Create Alignment Result Nodes" processor="org.janelia.it.jacs.compute.service.domain.node.CreateAlignmentResultFileNodeService">
    	        <output name="RESULT_FILE_NODE"/>
    	        <output name="RESULT_FILE_NODE_ID"/>
    	        <output name="ALIGN_RESULT_FILE_NODE"/>
    	    </operation>
                    
    	    <!-- Read from the Entity model and export the data into parameters that will be used by the subsequent services -->
    	    <operation name="Init Alignment Parameters" processor="org.janelia.it.jacs.compute.service.domain.alignment.InitAlignmentParametersService">
    			<input name="PARAMETERIZED_ALIGNMENT_ALGORITHM"/>
    			<output name="ALIGNMENT_SERVICE_CLASS"/>
    			<output name="ALIGNMENT_SCRIPT_NAME"/>
    			<output name="ALIGNMENT_RESULT_NAME"/>
    		</operation>
    		
            <!-- Read from the Entity model and export the data into parameters that will be used by the subsequent services -->
            <operation name="Get Alignment Parameters" processor="org.janelia.it.jacs.compute.service.domain.alignment.GetAlignmentInputsService">
                <input name="iservice" value="$V{ALIGNMENT_SERVICE_CLASS}"/>
                <input name="RESULT_FILE_NODE" value="$V{ALIGN_RESULT_FILE_NODE}"/>
                <input name="SAMPLE_ENTITY_ID"/>
                <input name="OBJECTIVE"/>
                <input name="SAMPLE_AREAS"/>
                <input name="WARP_NEURONS" value="true"/>
                <output name="ALIGNMENT_INPUTS"/>
                <output name="COPY_FROM_ARCHIVE"/>
                <output name="SOURCE_FILE_PATHS"/>
                <output name="TARGET_FILE_PATHS"/>
                <output name="ALIGNED_AREAS"/>
                <output name="RUN_ALIGNER"/>
                <output name="REGENERATE_INPUT"/>
            </operation>
            
            <sequence if="RUN_ALIGNER=true">
	        
	            <sequence if="COPY_FROM_ARCHIVE=true">
	            
	                <!-- Copy the files from archive -->
	                <include name="Archive Grid Copy" process="ArchiveGridCopy">
	                    <input name="SOURCE_FILE_PATHS"/>
	                    <input name="TARGET_FILE_PATHS"/>
	                </include>
	                    
	            </sequence>
	                    
                <sequence if="REGENERATE_INPUT is not empty">
                
                    <operation name="Get Regeneration Parameters" processor="org.janelia.it.jacs.compute.service.domain.sample.GetRegenerationParametersService">
                        <input name="SAMPLE_ENTITY_ID"/>
                        <input name="ALIGNMENT_INPUTS" value="$V{REGENERATE_INPUT}"/>
                        <output name="REGENERATE_SAMPLE_ID"/>
                        <output name="REGENERATE_OBJECTIVES"/>
                    </operation>
                    
                    <operation name="Get Pipeline Process Name" processor="org.janelia.it.jacs.compute.service.domain.sample.GetPipelineForSampleService">
                        <input name="SAMPLE_ENTITY_ID"/>
                        <output name="PROCESS_DEF_NAME"/>
                    </operation>
                    
                    <!-- Spawn a new task to process the Sample -->
                    <operation name="Process Sample Subtask" processor="org.janelia.it.jacs.compute.service.common.SubTaskExecutionService">
                        <input name="PROCESS_DEF_NAME"/>
                        <input name="DISPLAY_NAME" value="Input Sample Regeneration"/>
                        <input name="PARAMETER_1_KEY" value="sample entity id"/>
                        <input name="PARAMETER_1_VALUE" value="$V{REGENERATE_SAMPLE_ID}"/>
                        <input name="PARAMETER_2_KEY" value="run objectives"/>
                        <input name="PARAMETER_2_VALUE" value="$V{REGENERATE_OBJECTIVES}"/>
                        <input name="PROCESS_DATA_MAP">
                            <entry key="QUEUE_OVERRIDE" value="queue/sampleSecondaryPipelineLauncher"/>
                        </input>
                        <input name="TASK_PARAMETER_MAP">
                            <entry key="alignment algorithms" value=""/>
                            <entry key="alignment algorithm parameters" value=""/>
                            <entry key="alignment algorithm result names" value=""/>
                            <entry key="analysis algorithms" value=""/>
                            <entry key="reuse summary" value="false"/>
                            <entry key="reuse processing" value="false"/>
                            <entry key="reuse post" value="false"/>
                            <entry key="reuse alignment" value="false"/>
                            <entry key="persist" value="false"/>
                        </input>
                        <input name="WAIT_FOR_COMPLETION" value="true"/>
                        <input name="EXCEPTION_ON_ERROR" value="true"/>
                        <output name="SUBTASK_ID"/>
                    </operation>
                    
                    <operation name="Update aligned input to use the regenerated file" processor="org.janelia.it.jacs.compute.service.domain.alignment.InjectRegeneratedInputService">
                        <input name="TASK_ID" value="$V{SUBTASK_ID}"/>
                        <input name="ALIGNMENT_INPUTS" value="$V{REGENERATE_INPUT}"/>
                    </operation>
                
                </sequence>
                    
	       	    <!-- Align the sample -->
	            <sequence name="Align" waitForAsync="true">
	    	        <operation name="Align" processor="queue/gridSubmitAndWait">
	    	            <input name="iservice" value="$V{ALIGNMENT_SERVICE_CLASS}"/>
	    	    		<input name="RESULT_FILE_NODE" value="$V{ALIGN_RESULT_FILE_NODE}"/>
	    	    		<input name="ALIGNMENT_SCRIPT_NAME"/>
	    	    		<input name="ALIGNMENT_INPUTS"/>
	    	    		<input name="SAMPLE_ENTITY_ID"/>
                        <input name="OBJECTIVE"/>
	               		<input name="ALIGNED_AREAS"/>
	    				<output name="ALIGNED_FILENAME"/>
	    				<output name="ALIGNED_IMAGES"/>
	    	        </operation>
	            </sequence>
	        
                <sequence forEach="REGENERATE_INPUT">
                
                    <operation name="Remove regenerated input" processor="org.janelia.it.jacs.compute.service.domain.alignment.CleanUpRegeneratedFilesService">
                        <input name="ALIGNMENT_INPUT" value="$V{REGENERATE_INPUT}"/>
                    </operation>
                    
                </sequence>
	            
	    	    <!-- Generate MIP for the stitched file -->
	            <sequence name="Generate sample MIPs" waitForAsync="true">
	    	        <operation name="Generate MIPs" processor="queue/gridSubmitAndWait">
	    	            <input name="iservice" value="org.janelia.it.jacs.compute.service.neuronSeparator.MIPGenerationService"/>
	    				<input name="RESULT_FILE_NODE" value="$V{ALIGN_RESULT_FILE_NODE}"/>
	    				<input name="INPUT_IMAGES" value="$V{ALIGNED_IMAGES}"/>
	    	        </operation>
	            </sequence>
	            
	            <!-- Load the alignment results into the database -->
	            <operation name="Discover Alignment Results" processor="org.janelia.it.jacs.compute.service.domain.discovery.AlignmentResultsDiscoveryService">
	                <input name="ROOT_FILE_NODE" value="$V{ALIGN_RESULT_FILE_NODE}"/>
	                <input name="RESULT_ENTITY_NAME" value="$V{ALIGNMENT_RESULT_NAME}"/>
	                <input name="SAMPLE_ENTITY_ID"/>
                    <input name="OBJECTIVE"/>
                    <input name="PIPELINE_RUN_ENTITY_ID"/>
	                <output name="ALIGNMENT_ID"/>
	            </operation>

                <sequence forEach="ALIGNMENT_ID">
	
                    <!-- Synchronize results to SAGE -->
                    <operation name="Sage Qi Score Sync" processor="org.janelia.it.jacs.compute.service.domain.alignment.SageQiScoreSyncService">
                        <input name="SAMPLE_ENTITY_ID"/>
                        <input name="OBJECTIVE"/>
                        <input name="PIPELINE_RUN_ENTITY_ID"/>
                        <input name="ALIGNMENT_ID"/>
                    </operation>
    
    	            <sequence if="RUN_ANALYSIS=true">
    	                <sequence forEach="ANALYSIS_ALGORITHM">
    	                     
                            <!-- Get analysis parameters -->
                            <operation name="Get Parameters" processor="org.janelia.it.jacs.compute.service.domain.sample.InitAnalysisParametersService">
                                <input name="SAMPLE_ENTITY_ID"/>
                                <input name="OBJECTIVE"/>
                                <input name="PIPELINE_RUN_ENTITY_ID"/>
                                <input name="ALIGNMENT_ID"/>
                                <input name="ANALYSIS_ALGORITHM"/>
                                <output name="ANALYSIS_PIPELINE_NAME"/>
                                <output name="ALIGNED_CONSOLIDATED_LABEL_FILEPATH"/>
                            </operation>
                            
    	                    <!-- Run separation for each alignment output (e.g. 20x, 63x, etc...) -->
                            <sequence if="ALIGNED_CONSOLIDATED_LABEL_FILEPATH is not empty">
                            
                                <!-- Run neuron separation if there are signal channels to analyze -->
                                <include process="FlyLightSeparationPipeline" name="Aligned neuron separation" startEvent="running">
                                    <input name="SAMPLE_ENTITY_ID"/>
                                    <input name="OBJECTIVE"/>
                                    <input name="PIPELINE_RUN_ENTITY_ID"/>
                                    <input name="ROOT_ENTITY_ID" value="$V{ALIGNMENT_ID}"/>
                                    <input name="RESULT_ENTITY_NAME" value="Aligned Neuron Separation"/>
                                </include>
                            
    	                    </sequence>
    	                    
    	                </sequence>
    	            </sequence>

                </sequence>
	    
	        </sequence>
	        
        </sequence>
    
    </sequence>
    
</process>
