 <!-- 
      Run the neuron separator on a given input file for a given sample. 
 -->
 <process name="MultiColor FlipOut Separation Pipeline" processor="queue/mcfoSeparationPipelineLauncher" startEvent="pending">
	<sequence>
	    
	    <!-- Import variables from the MCFOSeparationPipelineTask -->
	    <operation name="Import Variables" processor="org.janelia.it.jacs.compute.service.common.InitVariablesFromTaskService">
            <input name="TASK_PARAMETER_1" value="sample entity id"/>
            <input name="PROCESS_VARIABLE_1" value="SAMPLE_ENTITY_ID"/>
            <input name="TASK_PARAMETER_2" value="input filename"/>
            <input name="PROCESS_VARIABLE_2" value="INPUT_FILENAME"/>
            <input name="TASK_PARAMETER_3" value="result entity name"/>
            <input name="PROCESS_VARIABLE_3" value="RESULT_ENTITY_NAME"/>
	        <output name="SAMPLE_ENTITY_ID"/>
	        <output name="INPUT_FILENAME"/>
	        <output name="RESULT_ENTITY_NAME"/>
	    </operation>
	    
	    <!-- Create a sample result node, with nested result nodes for all the pipeline steps -->
	    <operation name="Create Sample Result Nodes" processor="org.janelia.it.jacs.compute.service.entity.CreateSeparationResultFileNodeService">
	        <output name="RESULT_FILE_NODE"/>
	        <output name="RESULT_FILE_NODE_ID"/>
	        <output name="SEPARATE_RESULT_FILE_NODE"/>
	        <output name="COMPRESS_RESULT_FILE_NODE"/>
	        <output name="MIPS_RESULT_FILE_NODE"/>
	        <output name="CONVERT_RESULT_FILE_NODE"/>
	    </operation>
            
	    <!-- Run neuron separation on the stitched result -->
        <sequence name="Neuron Separation" waitForAsync="true">
		    <operation name="Neuron Separation" processor="queue/gridSubmitAndWait">
		        <input name="iservice" value="org.janelia.it.jacs.compute.service.neuronSeparator.NeuronSeparationPipelineGridService"/>
				<input name="SEPARATE_RESULT_FILE_NODE"/>
	    		<input name="RESULT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
				<input name="INPUT_FILENAME"/>
		    </operation>
        </sequence>
		    
	    <!-- Compress the results of neuron separation -->
        <sequence name="Compress" waitForAsync="true">
		    <operation name="Compress" processor="queue/gridSubmitAndWait">
		        <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.V3DConversionService"/>
				<input name="COMPRESS_RESULT_FILE_NODE"/>
	    		<input name="RESULT_FILE_NODE" value="$V{COMPRESS_RESULT_FILE_NODE}"/>
				<input name="SEPARATE_RESULT_FILE_NODE"/>
	    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
				<input name="INPUT_FILENAME_1" value="ConsolidatedSignal.tif"/>
				<input name="OUTPUT_FILENAME_1" value="ConsolidatedSignal.v3dpbd"/>
				<input name="OUTPUT_8BIT_1" value="true"/>
				<input name="INPUT_FILENAME_2" value="ConsolidatedLabel.tif"/>
				<input name="OUTPUT_FILENAME_2" value="ConsolidatedLabel.v3dpbd"/>
				<input name="OUTPUT_8BIT_2" value="true"/>
				<input name="INPUT_FILENAME_3" value="Reference.tif"/>
				<input name="OUTPUT_FILENAME_3" value="Reference.v3dpbd"/>
				<input name="OUTPUT_8BIT_3" value="true"/>
			</operation>
        </sequence>
	    
	    <!-- Generated whole-sample MIPs from the neuron separation results -->
        <sequence name="MIP Generation" waitForAsync="true">
		    <operation name="MIP Generation" processor="queue/gridSubmitAndWait">
		        <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.MIPGenerationService"/>
				<input name="MIPS_RESULT_FILE_NODE"/>
	    		<input name="RESULT_FILE_NODE" value="$V{MIPS_RESULT_FILE_NODE}"/>
				<input name="SEPARATE_RESULT_FILE_NODE"/>
	    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
				<input name="INPUT_FILENAME_1" value="ConsolidatedSignal.v3dpbd"/>
				<input name="OUTPUT_FILENAME_1" value="ConsolidatedSignalMIP.tif"/>
				<input name="INPUT_FILENAME_2" value="Reference.v3dpbd"/>
				<input name="OUTPUT_FILENAME_2" value="ReferenceMIP.tif"/>
			</operation>
        </sequence>
        
	    <!-- Convert all MIPs to PNG format -->
        <sequence name="MIP Conversion to PNG" waitForAsync="true">
		    <operation name="MIP Conversion to PNG" processor="queue/gridSubmitAndWait">
		        <input name="iservice" value="org.janelia.it.jacs.compute.service.utility.ImageConversionService"/>
				<input name="CONVERT_RESULT_FILE_NODE"/>
	    		<input name="RESULT_FILE_NODE" value="$V{CONVERT_RESULT_FILE_NODE}"/>
				<input name="SEPARATE_RESULT_FILE_NODE"/>
	    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
				<input name="INPUT_FILENAME_REGEX_1" value="((.*?)MIP)\.tif$"/>
				<input name="OUTPUT_FILENAME_PATTERN_1" value="$1.png"/>
				<input name="INPUT_FILENAME_REGEX_2" value="(neuronSeparatorPipeline\.PR\.(.*?))\.tif$"/>
				<input name="OUTPUT_FILENAME_PATTERN_2" value="$1.png"/>
			</operation>
        </sequence>
        
	    <!-- Cleanup all TIFs that are not needed since they were converted to PNG -->
		<operation name="Clean up unneeded TIFs" processor="org.janelia.it.jacs.compute.service.common.FileCleanupService">
			<input name="SEPARATE_RESULT_FILE_NODE"/>
			<input name="TARGET_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
			<input name="TARGET_FILENAME_1" value="ConsolidatedSignal.tif"/>
			<input name="TARGET_FILENAME_2" value="ConsolidatedLabel.tif"/>
			<input name="TARGET_FILENAME_3" value="Reference.tif"/>
			<input name="TARGET_FILENAME_REGEX_4" value="(.*?)MIP\.tif$"/>
			<input name="TARGET_FILENAME_REGEX_5" value="neuronSeparatorPipeline\.PR\.(.*?)\.tif$"/>
			<input name="TARGET_FILENAME_REGEX_6" value="(.*?)\.(oos|neu)$"/>
	    </operation>

	    <!-- Copy LSM metadata files -->
	    <operation name="Copy Lsm Metadata Files" processor="org.janelia.it.jacs.compute.service.entity.MigrateLsmMetadataFilesService">
	        <input name="SAMPLE_ENTITY_ID"/>
	        <input name="SEPARATE_RESULT_FILE_NODE"/>
	    </operation>

	    <!-- Load the separation results into the database -->
		<operation name="Discover Neuron Separation Results" processor="org.janelia.it.jacs.compute.service.fileDiscovery.NeuronSeparatorResultsDiscoveryService">
			<input name="SEPARATE_RESULT_FILE_NODE"/>
			<input name="ROOT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
			<input name="SAMPLE_ENTITY_ID"/>
			<input name="ROOT_ENTITY_ID" value="$V{SAMPLE_ENTITY_ID}"/>
			<input name="RESULT_ENTITY_NAME"/>
	    </operation>
			
    </sequence>
</process>