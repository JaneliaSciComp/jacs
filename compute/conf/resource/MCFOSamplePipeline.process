 <!-- 
      Fully process a Sample in the database by merging its LSMs, stitching and blending them, aligning,
      and running neuron separation. Any of the steps can be skipped if the Sample already has a result of that type.
 -->
 <process name="MultiColor FlipOut Sample Pipeline" processor="queue/mcfoSamplePipelineLauncher" startEvent="pending">
	<sequence>
	    
	    <!-- Import variables from the MCFOSamplePipelineTask -->
	    <operation name="Import Variables" processor="org.janelia.it.jacs.compute.service.common.InitVariablesFromTaskService">
            <input name="TASK_PARAMETER_1" value="sample entity id"/>
            <input name="PROCESS_VARIABLE_1" value="SAMPLE_ENTITY_ID"/>
            <input name="TASK_PARAMETER_2" value="refresh processing"/>
            <input name="PROCESS_VARIABLE_2" value="REFRESH_PROCESSING"/>
            <input name="TASK_PARAMETER_3" value="refresh alignment"/>
            <input name="PROCESS_VARIABLE_3" value="REFRESH_ALIGNMENT"/>
            <input name="TASK_PARAMETER_4" value="refresh separation"/>
            <input name="PROCESS_VARIABLE_4" value="REFRESH_SEPARATION"/>
	        <output name="SAMPLE_ENTITY_ID"/>
	    </operation>
	    
	    <!-- Decide which types of processing will be run -->
	    <operation name="Choose Sample Processing Steps" processor="org.janelia.it.jacs.compute.service.entity.ChooseMCFOSampleStepsService">
			<input name="SAMPLE_ENTITY_ID"/>
			<input name="REFRESH_PROCESSING"/>
			<input name="REFRESH_ALIGNMENT"/>
			<input name="REFRESH_SEPARATION"/>
			<output name="RUN_PROCESSING"/>
			<output name="RUN_ALIGNMENT"/>
			<output name="RUN_SEPARATION"/>
			<output name="RUN_ALIGNED_SEPARATION"/>
			<output name="IS_ALIGNABLE"/>
			<output name="STITCHED_FILENAME"/>
			<output name="ALIGNED_FILENAME"/>
		</operation>
		
        <sequence if="RUN_PROCESSING=true">
	        	
		    <!-- Create a sample result node, with nested result nodes for all the pipeline steps -->
		    <operation name="Create Sample Result Nodes" processor="org.janelia.it.jacs.compute.service.entity.CreateSampleResultFileNodeService">
		        <output name="RESULT_FILE_NODE"/>
		        <output name="RESULT_FILE_NODE_ID"/>
		        <output name="SAMPLE_RESULT_FILE_NODE"/>
		        <output name="METADATA_RESULT_FILE_NODE"/>
		        <output name="MERGE_RESULT_FILE_NODE"/>
		        <output name="STITCH_RESULT_FILE_NODE"/>
		    </operation>
		            
		    <!-- Read from the Entity model and export the data into parameters that will be used by the subsequent services -->
		    <operation name="Create Parameters" processor="org.janelia.it.jacs.compute.service.entity.InitSampleProcessingParametersService">
				<input name="SAMPLE_RESULT_FILE_NODE"/>
		        <input name="MERGE_RESULT_FILE_NODE"/>
		        <input name="STITCH_RESULT_FILE_NODE"/>
				<input name="SAMPLE_ENTITY_ID"/>
				<output name="BULK_MERGE_PARAMETERS"/>
				<output name="STITCHED_FILENAME"/>
			</operation>
		
		    <!-- Asynchronously create the metadata describing the input LSM files -->
	        <sequence name="Create Lsm Metadata Files" waitForAsync="true">
		        <operation name="Create Lsm Metadata Files" processor="queue/gridSubmitAndWait">
		            <input name="iservice" value="org.janelia.it.jacs.compute.service.entity.CreateLsmMetadataFilesService"/>
			        <input name="SAMPLE_ENTITY_ID"/>
					<input name="METADATA_RESULT_FILE_NODE"/>
			        <input name="RESULT_FILE_NODE" value="$V{METADATA_RESULT_FILE_NODE}"/>
					<input name="SAMPLE_RESULT_FILE_NODE"/>
		    		<input name="OUTPUT_FILE_NODE" value="$V{METADATA_RESULT_FILE_NODE}"/>
		        </operation>
	        </sequence>
		    
		    <!-- Merge all the LSM pairs in parallel -->
	        <sequence name="Merge Lsm Pairs" waitForAsync="true">
		        <operation name="Merge Lsm Pairs" processor="queue/gridSubmitAndWait">
		            <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.V3DBulkMergeService"/>
					<input name="MERGE_RESULT_FILE_NODE"/>
		    		<input name="RESULT_FILE_NODE" value="$V{MERGE_RESULT_FILE_NODE}"/>
					<input name="BULK_MERGE_PARAMETERS"/>
		        </operation>
	        </sequence>
		
		    <!-- Stitch the merged files into a single result (does nothing in the case of a single tile) -->
	        <sequence name="Stitch and Blend" waitForAsync="true">
		        <operation name="Stitch and Blend" processor="queue/gridSubmitAndWait">
		            <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.V3DStitchAndBlendService"/>
					<input name="STITCH_RESULT_FILE_NODE"/>
		    		<input name="RESULT_FILE_NODE" value="$V{STITCH_RESULT_FILE_NODE}"/>
					<input name="MERGE_RESULT_FILE_NODE"/>
		    		<input name="INPUT_FILE_NODE" value="$V{MERGE_RESULT_FILE_NODE}"/>
					<input name="BULK_MERGE_PARAMETERS"/>
					<input name="STITCHED_FILENAME"/>
		        </operation>
	        </sequence>
	        
		    <!-- Load the sample analysis results into the database -->
			<operation name="Discover Sample Processing Results" processor="org.janelia.it.jacs.compute.service.fileDiscovery.SupportingFilesDiscoveryService">
				<input name="SAMPLE_RESULT_FILE_NODE"/>
				<input name="ROOT_FILE_NODE" value="$V{SAMPLE_RESULT_FILE_NODE}"/>
				<input name="SAMPLE_ENTITY_ID"/>
				<input name="ROOT_ENTITY_ID" value="$V{SAMPLE_ENTITY_ID}"/>
				<input name="RESULT_ENTITY_TYPE" value="Sample Processing Result"/>
				<input name="RESULT_ENTITY_NAME" value="Sample Processing"/>
		    </operation>
	    	
	    </sequence>
	    
        <sequence if="RUN_SEPARATION=true">
	
			<!-- TODO: in the future, the separation pipeline should be externalized by adding support for "include" defs, something like this: 
	        <include process="MCFOSeparationPipeline">
	            <input name="SAMPLE_ENTITY_ID"/>
	            <input name="STITCHED_FILENAME"/>
	            <input name="INPUT_FILENAME" value="$V{STITCHED_FILENAME}"/>
	            <input name="RESULT_ENTITY_NAME" value="Prealigned Neuron Separation"/>
	        </include>
			-->
			
		    <!-- Create a sample result node, with nested result nodes for all the pipeline steps -->
		    <operation name="Create Sample Result Nodes" processor="org.janelia.it.jacs.compute.service.entity.CreateSeparationResultFileNodeService">
		        <output name="RESULT_FILE_NODE"/>
		        <output name="RESULT_FILE_NODE_ID"/>
		        <output name="SEPARATE_RESULT_FILE_NODE"/>
		        <output name="COMPRESS_RESULT_FILE_NODE"/>
		        <output name="MIPS_RESULT_FILE_NODE"/>
		        <output name="CONVERT_RESULT_FILE_NODE"/>
		    </operation>
	            
		    <!-- Run neuron separation on the stitched result -->
	        <sequence name="Neuron Separation" waitForAsync="true">
			    <operation name="Neuron Separation" processor="queue/gridSubmitAndWait">
			        <input name="iservice" value="org.janelia.it.jacs.compute.service.neuronSeparator.NeuronSeparationPipelineGridService"/>
					<input name="SEPARATE_RESULT_FILE_NODE"/>
		    		<input name="RESULT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
		            <input name="STITCHED_FILENAME"/>
		            <input name="INPUT_FILENAME" value="$V{STITCHED_FILENAME}"/>
			    </operation>
	        </sequence>
			    
		    <!-- Compress the results of neuron separation -->
	        <sequence name="Compress" waitForAsync="true">
			    <operation name="Compress" processor="queue/gridSubmitAndWait">
			        <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.V3DConversionService"/>
					<input name="COMPRESS_RESULT_FILE_NODE"/>
		    		<input name="RESULT_FILE_NODE" value="$V{COMPRESS_RESULT_FILE_NODE}"/>
					<input name="SEPARATE_RESULT_FILE_NODE"/>
		    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
					<input name="INPUT_FILENAME_1" value="ConsolidatedSignal.tif"/>
					<input name="OUTPUT_FILENAME_1" value="ConsolidatedSignal.v3dpbd"/>
					<input name="OUTPUT_8BIT_1" value="true"/>
					<input name="INPUT_FILENAME_2" value="ConsolidatedLabel.tif"/>
					<input name="OUTPUT_FILENAME_2" value="ConsolidatedLabel.v3dpbd"/>
					<input name="OUTPUT_8BIT_2" value="true"/>
					<input name="INPUT_FILENAME_3" value="Reference.tif"/>
					<input name="OUTPUT_FILENAME_3" value="Reference.v3dpbd"/>
					<input name="OUTPUT_8BIT_3" value="true"/>
				</operation>
	        </sequence>
		    
		    <!-- Generated whole-sample MIPs from the neuron separation results -->
	        <sequence name="MIP Generation" waitForAsync="true">
			    <operation name="MIP Generation" processor="queue/gridSubmitAndWait">
			        <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.MIPGenerationService"/>
					<input name="MIPS_RESULT_FILE_NODE"/>
		    		<input name="RESULT_FILE_NODE" value="$V{MIPS_RESULT_FILE_NODE}"/>
					<input name="SEPARATE_RESULT_FILE_NODE"/>
		    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
					<input name="INPUT_FILENAME_1" value="ConsolidatedSignal.v3dpbd"/>
					<input name="OUTPUT_FILENAME_1" value="ConsolidatedSignalMIP.tif"/>
					<input name="OUTPUT_FLIPY_1" value="true"/>
					<input name="INPUT_FILENAME_2" value="Reference.v3dpbd"/>
					<input name="OUTPUT_FILENAME_2" value="ReferenceMIP.tif"/>
					<input name="OUTPUT_FLIPY_2" value="false"/>
				</operation>
	        </sequence>
	        
		    <!-- Convert all MIPs to PNG format -->
	        <sequence name="MIP Conversion to PNG" waitForAsync="true">
			    <operation name="MIP Conversion to PNG" processor="queue/gridSubmitAndWait">
			        <input name="iservice" value="org.janelia.it.jacs.compute.service.utility.ImageConversionService"/>
					<input name="CONVERT_RESULT_FILE_NODE"/>
		    		<input name="RESULT_FILE_NODE" value="$V{CONVERT_RESULT_FILE_NODE}"/>
					<input name="SEPARATE_RESULT_FILE_NODE"/>
		    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
					<input name="INPUT_FILENAME_REGEX_1" value="((.*?)MIP)\.tif$"/>
					<input name="OUTPUT_FILENAME_PATTERN_1" value="$1.png"/>
					<input name="INPUT_FILENAME_REGEX_2" value="(neuronSeparatorPipeline\.PR\.(.*?))\.tif$"/>
					<input name="OUTPUT_FILENAME_PATTERN_2" value="$1.png"/>
				</operation>
	        </sequence>
	        
		    <!-- Cleanup all TIFs that are not needed since they were converted to PNG -->
			<operation name="Clean up unneeded TIFs" processor="org.janelia.it.jacs.compute.service.common.FileCleanupService">
				<input name="SEPARATE_RESULT_FILE_NODE"/>
				<input name="TARGET_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
				<input name="TARGET_FILENAME_1" value="ConsolidatedSignal.tif"/>
				<input name="TARGET_FILENAME_2" value="ConsolidatedLabel.tif"/>
				<input name="TARGET_FILENAME_3" value="Reference.tif"/>
				<input name="TARGET_FILENAME_REGEX_4" value="(.*?)MIP\.tif$"/>
				<input name="TARGET_FILENAME_REGEX_5" value="neuronSeparatorPipeline\.PR\.(.*?)\.tif$"/>
				<input name="TARGET_FILENAME_REGEX_6" value="(.*?)\.(oos|neu)$"/>
		    </operation>
	
		    <!-- Load the separation results into the database -->
			<operation name="Discover Neuron Separation Results" processor="org.janelia.it.jacs.compute.service.fileDiscovery.NeuronSeparatorResultsDiscoveryService">
				<input name="SEPARATE_RESULT_FILE_NODE"/>
				<input name="ROOT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
				<input name="SAMPLE_ENTITY_ID"/>
				<input name="ROOT_ENTITY_ID" value="$V{SAMPLE_ENTITY_ID}"/>
				<input name="RESULT_ENTITY_NAME" value="Prealigned Neuron Separation"/>
		    </operation>
	
		    <!-- Copy LSM metadata files -->
		    <operation name="Copy Lsm Metadata Files" processor="org.janelia.it.jacs.compute.service.entity.MigrateLsmMetadataFilesService">
		        <input name="SAMPLE_ENTITY_ID"/>
		        <input name="SEPARATE_RESULT_FILE_NODE"/>
		    </operation>
		    
		</sequence>
	    	        
    	<sequence if="IS_ALIGNABLE=true">
    	
	        <sequence if="RUN_ALIGNMENT=true">
			
			    <!-- Create a alignment result node, with nested result nodes for all the pipeline steps -->
			    <operation name="Create Alignment Result Nodes" processor="org.janelia.it.jacs.compute.service.entity.CreateAlignmentResultFileNodeService">
			        <output name="RESULT_FILE_NODE"/>
			        <output name="RESULT_FILE_NODE_ID"/>
			        <output name="ALIGN_RESULT_FILE_NODE"/>
			    </operation>
		                
			    <!-- Read from the Entity model and export the data into parameters that will be used by the subsequent services -->
			    <operation name="Create Parameters" processor="org.janelia.it.jacs.compute.service.entity.InitAlignmentParametersService">
					<input name="SAMPLE_ENTITY_ID"/>
					<output name="ALIGNMENT_SERVICE_CLASS"/>
					<output name="ALIGNMENT_RESULT_NAME"/>
				</operation>
			    
		   	    <!-- Align the sample -->
		        <sequence name="Align" waitForAsync="true">
			        <operation name="Align" processor="queue/gridSubmitAndWait">
						<input name="ALIGNMENT_SERVICE_CLASS"/>
			            <input name="iservice" value="$V{ALIGNMENT_SERVICE_CLASS}"/>
						<input name="ALIGN_RESULT_FILE_NODE"/>
			    		<input name="RESULT_FILE_NODE" value="$V{ALIGN_RESULT_FILE_NODE}"/>
			    		<input name="STITCHED_FILENAME"/>
						<input name="INPUT_FILENAME" value="$V{STITCHED_FILENAME}"/>
						<output name="ALIGNED_FILENAME"/>
			        </operation>
		        </sequence>
		        
			    <!-- Load the alignment results into the database -->
				<operation name="Discover Alignment Results" processor="org.janelia.it.jacs.compute.service.fileDiscovery.SupportingFilesDiscoveryService">
					<input name="ALIGN_RESULT_FILE_NODE"/>
					<input name="ROOT_FILE_NODE" value="$V{ALIGN_RESULT_FILE_NODE}"/>
					<input name="SAMPLE_ENTITY_ID"/>
					<input name="ROOT_ENTITY_ID" value="$V{SAMPLE_ENTITY_ID}"/>
					<input name="RESULT_ENTITY_TYPE" value="Alignment Result"/>
					<input name="ALIGNMENT_RESULT_NAME"/>
					<input name="RESULT_ENTITY_NAME" value="$V{ALIGNMENT_RESULT_NAME}"/>
			    </operation>
			    
		    </sequence>
		    
	    	<sequence if="RUN_ALIGNED_SEPARATION=true">
		        	
			    <!-- Create a sample result node, with nested result nodes for all the pipeline steps -->
			    <operation name="Create Sample Result Nodes" processor="org.janelia.it.jacs.compute.service.entity.CreateSeparationResultFileNodeService">
			        <output name="RESULT_FILE_NODE"/>
			        <output name="RESULT_FILE_NODE_ID"/>
			        <output name="SEPARATE_RESULT_FILE_NODE"/>
			        <output name="COMPRESS_RESULT_FILE_NODE"/>
			        <output name="MIPS_RESULT_FILE_NODE"/>
			        <output name="CONVERT_RESULT_FILE_NODE"/>
			    </operation>
		            
			    <!-- Run neuron separation on the stitched result -->
		        <sequence name="Neuron Separation" waitForAsync="true">
				    <operation name="Neuron Separation" processor="queue/gridSubmitAndWait">
				        <input name="iservice" value="org.janelia.it.jacs.compute.service.neuronSeparator.NeuronSeparationPipelineGridService"/>
						<input name="SEPARATE_RESULT_FILE_NODE"/>
			    		<input name="RESULT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
						<input name="INPUT_FILENAME"/>
			            <input name="ALIGNED_FILENAME"/>
			            <input name="INPUT_FILENAME" value="$V{ALIGNED_FILENAME}"/>
				    </operation>
		        </sequence>
				    
			    <!-- Compress the results of neuron separation -->
		        <sequence name="Compress" waitForAsync="true">
				    <operation name="Compress" processor="queue/gridSubmitAndWait">
				        <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.V3DConversionService"/>
						<input name="COMPRESS_RESULT_FILE_NODE"/>
			    		<input name="RESULT_FILE_NODE" value="$V{COMPRESS_RESULT_FILE_NODE}"/>
						<input name="SEPARATE_RESULT_FILE_NODE"/>
			    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
						<input name="INPUT_FILENAME_1" value="ConsolidatedSignal.tif"/>
						<input name="OUTPUT_FILENAME_1" value="ConsolidatedSignal.v3dpbd"/>
						<input name="OUTPUT_8BIT_1" value="true"/>
						<input name="INPUT_FILENAME_2" value="ConsolidatedLabel.tif"/>
						<input name="OUTPUT_FILENAME_2" value="ConsolidatedLabel.v3dpbd"/>
						<input name="OUTPUT_8BIT_2" value="true"/>
						<input name="INPUT_FILENAME_3" value="Reference.tif"/>
						<input name="OUTPUT_FILENAME_3" value="Reference.v3dpbd"/>
						<input name="OUTPUT_8BIT_3" value="true"/>
					</operation>
		        </sequence>
			    
			    <!-- Generated whole-sample MIPs from the neuron separation results -->
		        <sequence name="MIP Generation" waitForAsync="true">
				    <operation name="MIP Generation" processor="queue/gridSubmitAndWait">
				        <input name="iservice" value="org.janelia.it.jacs.compute.service.v3d.MIPGenerationService"/>
						<input name="MIPS_RESULT_FILE_NODE"/>
			    		<input name="RESULT_FILE_NODE" value="$V{MIPS_RESULT_FILE_NODE}"/>
						<input name="SEPARATE_RESULT_FILE_NODE"/>
			    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
						<input name="INPUT_FILENAME_1" value="ConsolidatedSignal.v3dpbd"/>
						<input name="OUTPUT_FILENAME_1" value="ConsolidatedSignalMIP.tif"/>
						<input name="OUTPUT_FLIPY_1" value="true"/>
						<input name="INPUT_FILENAME_2" value="Reference.v3dpbd"/>
						<input name="OUTPUT_FILENAME_2" value="ReferenceMIP.tif"/>
						<input name="OUTPUT_FLIPY_2" value="false"/>
					</operation>
		        </sequence>
		        
			    <!-- Convert all MIPs to PNG format -->
		        <sequence name="MIP Conversion to PNG" waitForAsync="true">
				    <operation name="MIP Conversion to PNG" processor="queue/gridSubmitAndWait">
				        <input name="iservice" value="org.janelia.it.jacs.compute.service.utility.ImageConversionService"/>
						<input name="CONVERT_RESULT_FILE_NODE"/>
			    		<input name="RESULT_FILE_NODE" value="$V{CONVERT_RESULT_FILE_NODE}"/>
						<input name="SEPARATE_RESULT_FILE_NODE"/>
			    		<input name="OUTPUT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
						<input name="INPUT_FILENAME_REGEX_1" value="((.*?)MIP)\.tif$"/>
						<input name="OUTPUT_FILENAME_PATTERN_1" value="$1.png"/>
						<input name="INPUT_FILENAME_REGEX_2" value="(neuronSeparatorPipeline\.PR\.(.*?))\.tif$"/>
						<input name="OUTPUT_FILENAME_PATTERN_2" value="$1.png"/>
					</operation>
		        </sequence>
		        
			    <!-- Cleanup all TIFs that are not needed since they were converted to PNG -->
				<operation name="Clean up unneeded TIFs" processor="org.janelia.it.jacs.compute.service.common.FileCleanupService">
					<input name="SEPARATE_RESULT_FILE_NODE"/>
					<input name="TARGET_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
					<input name="TARGET_FILENAME_1" value="ConsolidatedSignal.tif"/>
					<input name="TARGET_FILENAME_2" value="ConsolidatedLabel.tif"/>
					<input name="TARGET_FILENAME_3" value="Reference.tif"/>
					<input name="TARGET_FILENAME_REGEX_4" value="(.*?)MIP\.tif$"/>
					<input name="TARGET_FILENAME_REGEX_5" value="neuronSeparatorPipeline\.PR\.(.*?)\.tif$"/>
					<input name="TARGET_FILENAME_REGEX_6" value="(.*?)\.(oos|neu)$"/>
			    </operation>
		
			    <!-- Load the separation results into the database -->
				<operation name="Discover Neuron Separation Results" processor="org.janelia.it.jacs.compute.service.fileDiscovery.NeuronSeparatorResultsDiscoveryService">
					<input name="SEPARATE_RESULT_FILE_NODE"/>
					<input name="ROOT_FILE_NODE" value="$V{SEPARATE_RESULT_FILE_NODE}"/>
					<input name="SAMPLE_ENTITY_ID"/>
					<input name="ROOT_ENTITY_ID" value="$V{SAMPLE_ENTITY_ID}"/>
					<input name="RESULT_ENTITY_NAME" value="Aligned Neuron Separation"/>
			    </operation>
		
			    <!-- Copy LSM metadata files -->
			    <operation name="Copy Lsm Metadata Files" processor="org.janelia.it.jacs.compute.service.entity.MigrateLsmMetadataFilesService">
			        <input name="SAMPLE_ENTITY_ID"/>
			        <input name="SEPARATE_RESULT_FILE_NODE"/>
			    </operation>
			    
	    	</sequence>
	    	
	    </sequence>
    	
    </sequence>
</process>