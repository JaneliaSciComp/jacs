 <!-- 
      Post-processing of the unaligned stacks of the given sample. 
 -->
 <process name="FlyLight Post-Processing Pipeline" processor="queue/samplePipelineLauncher" startEvent="pending" updateProcessStatus="on_success">
    <sequence>

        <input name="SAMPLE_AREAS"/>
        <input name="PIPELINE_RUN_ENTITY_ID"/>
        <input name="SAMPLE_ENTITY_ID"/>
        <input name="IMAGE_TYPE"/>
        <input name="OUTPUT_COLOR_SPEC"/>
        <input name="REUSE_POST"/>
    
        <!-- Decide which types of processing will be run -->
        <operation name="Choose Summary Processing Steps" processor="org.janelia.it.jacs.compute.service.entity.sample.ChoosePostProcessingPipelineStepsService">
            <output name="RUN_POST"/>
        </operation>
        
        <sequence if="REUSE_POST=true">
            
            <!-- Reuse sample processing from previous pipeline run -->
            <operation name="Reuse Alignment Entity" processor="org.janelia.it.jacs.compute.service.entity.sample.ReusePostProcessingResultService">
                <input name="SAMPLE_ENTITY_ID"/>
                <input name="OBJECTIVE"/>
                <input name="PIPELINE_RUN_ENTITY_ID"/>
                <output name="RESULT_ENTITY"/>
                <output name="RESULT_ENTITY_ID"/>
                <output name="RUN_POST"/>
            </operation>
            
        </sequence>
        
        <sequence if="RUN_POST=true">
        
            <!-- TODO: Right now, post-processing only works if processing is run. To fix this, we need to populate SAMPLE_AREAS and other variables when processing is reused. -->
            <sequence if="RUN_PROCESSING=true">
            
                <!-- Create a result node for this group -->
                <operation name="Create Post-Processing Result Node" processor="org.janelia.it.jacs.compute.service.entity.CreateNamedResultFileNodeService">
                    <input name="NAME" value="Post"/>
                    <output name="RESULT_FILE_NODE"/>
                    <output name="RESULT_FILE_NODE_ID"/>
                </operation>
                
                <!-- Get a list of unaligned images to create summaries for -->
                <operation name="Get unaligned image List" processor="org.janelia.it.jacs.compute.service.entity.sample.GetUnalignedInputImagesService">
                    <input name="SAMPLE_ENTITY_ID"/>
                    <input name="OBJECTIVE"/>
                    <input name="PIPELINE_RUN_ENTITY_ID"/>
                    <input name="SAMPLE_AREAS"/>
                    <input name="OUTPUT_COLOR_SPEC"/>
                    <input name="MODE" value="$V{IMAGE_TYPE}"/>
                    <input name="SAMPLE_NAMING" value="true"/>
                    <output name="INPUT_IMAGES"/>
                    <output name="SERVICE_CLASS"/>
                    <output name="NORMALIZE_TO_FIRST_IMAGE"/>
                </operation>
            
                <!-- Create MIPs and movies for all unaligned images -->
                <sequence name="Create Unaligned Image Artifacts" waitForAsync="true">
                    <operation name="Create Unaligned Image Artifacts" processor="queue/gridSubmitAndWait">
                        <input name="iservice" value="$V{SERVICE_CLASS}"/>
                        <input name="RESULT_FILE_NODE"/>
                        <input name="OUTPUT_FILE_NODE" value="$V{RESULT_FILE_NODE}"/>
                        <input name="INPUT_IMAGES"/>
                        <input name="NORMALIZE_TO_FIRST_IMAGE"/>
                        <input name="OPTIONS" value="mips:movies:legends:hist"/>
                        <input name="MODE" value="$V{IMAGE_TYPE}"/>
                    </operation>
                </sequence>
                
                <!-- Load the MIPs and movies into the database -->
                <operation name="Discover Post-Processing Results" processor="org.janelia.it.jacs.compute.service.fileDiscovery.PostProcessingResultsDiscoveryService">
                    <input name="ROOT_FILE_NODE" value="$V{RESULT_FILE_NODE}"/>
                    <input name="SAMPLE_ENTITY_ID" value="$V{PIPELINE_RUN_ENTITY_ID}"/>
                    <input name="OBJECTIVE"/>
                    <input name="PIPELINE_RUN_ENTITY_ID"/>
                    <input name="RESULT_ENTITY_NAME" value="Post-Processing Result"/>
                    <output name="RESULT_ENTITY_ID"/>
                </operation>
                    
            </sequence>
        
        </sequence>
    
    </sequence>
    
</process>
