requires("1.44");
setBatchMode(true);

//Declaration of variables
Vers="v3.0";
Vercomp="v0g";

// File-name is optional input argument
file_name = getArgument();

if (file_name=="")
{
	file_name = File.openDialog("Please choose a spot file or an outline file");
	mode_again = 1;
}
else
{
	mode_again = 0;
}

// Exit if not file-name was specified
if(file_name =="")
{
	exit("No file selected.");
}


// Read-in results of spot-detection
Spotfile     = File.openAsString(file_name);
path_results = File.getParent(file_name);
Spotfile     = split(Spotfile,"\n");
sizespotfile = Spotfile.length;

again = 1;
while(again==1){

// Create Functions which are needed
//   posx,y = center of spot, 
//   label_diameter = taille du vide de la cible et taille du trait de la cible ou taille du cercle ou taille du carre
	

function target(posx, posy, label_diameter) 
{
	x1=posx+label_diameter;
	y1=posy;
	x2=x1+label_diameter;
	y2=posy;
	drawLine(x1, y1, x2, y2);
	x1=posx-label_diameter;
	y1=posy;
	x2=x1-label_diameter;
	y2=posy;
	drawLine(x1, y1, x2, y2);
	x1=posx;
	y1=posy+label_diameter;
	x2=posx;
	y2=y1+label_diameter;
	drawLine(x1, y1, x2, y2);
	x1=posx;
	y1=posy-label_diameter;
	x2=posx;
	y2=y1-label_diameter;
	drawLine(x1, y1, x2, y2);
}
   

function cercle(posx,posy,label_diameter)
{
   drawOval(posx-label_diameter/2, posy-label_diameter/2, label_diameter, label_diameter);
}
   

function pixel(posx,posy,label_diameter)
{
   fillRect(posx-label_diameter/2, posy-label_diameter/2, label_diameter, label_diameter);
}


function spot(posx,posy,label_diameter,label_type)
{
		if (label_type=="circle"){
		cercle(posx,posy,lenght);
		}
		else if (label_type=="target"){
		target(posx,posy,lenght);
		}
		else if (label_type=="spot"){
		pixel(posx,posy,lenght);
		}
}


// Check to see if file is really file of spot detection
Spotfileok     = Spotfile[1];
Spotfileok     = split(Spotfileok," ");
resultspotfile = 0;
outlinefile    = 0;

if(Spotfileok[0]=="RESULTS"){
resultspotfile=1;
}
else if(Spotfileok[0]=="OUTLINE"){
outlinefile=1;
}

if(resultspotfile==0&&outlinefile==0){
exit("Your spot file is not correct");
}

// Extract version number and if macro is compatible
Ver = Spotfile[0];
Ver = split(Ver,"\t");
Ver = Ver[1];

if (Ver==Vercomp)
{ Verc="compatible";}
else 
{ Verc="potentially incompatible"; }


// Extract date
Date=Spotfile[1];

// Extract comment
Comment = Spotfile[2];
if(indexOf(Comment, "\t")!=-1){
Comment = split(Comment,"\t");
Comment = Comment[1];
}

// Extract file-name
Fichier   = Spotfile[3];
Fichier   = split(Fichier,"\t");
Fichier   = Fichier[1];
Fichiersm = substring(Fichier, 0, lengthOf(Fichier)-4);


// Extract filtered file-name
Fichierf   = Spotfile[4];
Fichierfp=0;
if((indexOf(Fichierf, "\t")!=-1)){
Fichierf  = split(Fichierf,"\t");
	if (Fichierf.length==2){
	Fichierfp =1;
	Fichierf   = Fichierf[1];
	Fichiersfm = substring(Fichierf, 0, lengthOf(Fichierf)-4);
	}
}


// Default names for output image
if (resultspotfile==1)
{	extfichier="+Spots.tif";}
else 
{	extfichier="+outlines.tif";}


// Parameters
Parameters=Spotfile[7];
Parameters=split(Parameters,"\t");
	pixxy=Parameters[0];
	pixz=Parameters[1];
	RI=Parameters[2];
	Ex=Parameters[3];
	Em=Parameters[4];
	NA=Parameters[5];
	Type=Parameters[6];
	
//Creation interface utilisateur
label_type_c=newArray("circle","target","spot","*none*");
fichieruse=newArray(2);
fichieruse[0]=Fichier;
if (Fichierfp==1){
fichieruse[1]=Fichierf;
}
else {
fichieruse[1]=Fichier;
}
colorcell=newArray("Red","Green","Yellow","Grays");
color=newArray("Red","Green","Blue","Magenta","Cyan","Yellow","Grays");
nslice=newArray("1","3","5","7");
Dialog.create("Incorporation of outlines and spots in image "+Vers);
Dialog.addMessage("You use a spot file version "+Ver+" which is "+Verc+" with this macro.");
Dialog.addMessage(Date);
Dialog.addMessage("Comment: "+Comment);
Dialog.addChoice("Loop-up table for picture",colorcell,"Grays");
Dialog.addChoice("Wich file use",fichieruse);
	if (resultspotfile==1){
	Dialog.addChoice("Presentation of spots?",label_type_c);
	Dialog.addNumber("Length of target or circle or number of pixel:", 8);
	Dialog.addChoice("Spots are shown on how many slices:", nslice,7);
	Dialog.addChoice("Color for spots considered after thresholding",color,"Green");
	Dialog.addCheckbox("Add spot considered after thresholding?",1);
	Dialog.addChoice("Color for spots NOT-considered after thresholding",color,"Red");
	Dialog.addCheckbox("Add spot not considered after thresholding?",1);
	}
Dialog.addString("Filename to save image", Fichiersm+extfichier,30);
Dialog.addCheckbox("Add cell outlines?",1);
Dialog.addChoice("Color for cell outline",color,"Grays");
Dialog.addNumber("Line-width for cell outline",2);
Dialog.addCheckbox("Add TxSite outlines?",1);
Dialog.addChoice("Color for TS outline",color,"Magenta");
Dialog.addNumber("Line-width for TS outline",1);
Dialog.addCheckbox("Show maximum projection in XY", 0)
Dialog.show();

//Recuperation des variables
colorpicture=Dialog.getChoice();
Fichier=Dialog.getChoice();
	if (resultspotfile==1){
	label_type=Dialog.getChoice();
	nslice=Dialog.getChoice();
	lenght=Dialog.getNumber();
	colorspot1=Dialog.getChoice();
	spot1=Dialog.getCheckbox();
	colorspot0=Dialog.getChoice();
	spot0=Dialog.getCheckbox();
	}
	else {
	nslice="0";
	}
filesave      = Dialog.getString();
celloutline  = Dialog.getCheckbox();
colorcell     = Dialog.getChoice();
sizecell      = Dialog.getNumber();
TSoutline  = Dialog.getCheckbox();
colorTS     = Dialog.getChoice();
sizeTS      = Dialog.getNumber();
maxproj   = Dialog.getCheckbox();

if (nslice=="1"){
nslice=1;
}

else if (nslice=="3"){
nslice=3;
}

else if (nslice=="5"){
nslice=5;
}

else if (nslice=="7"){
nslice=7;
}

else {
nslice=0;
}

//Open image and get dimensions
open(path_results+File.separator+Fichier);
img_width = getWidth();
img_height = getHeight();
img_slices  = nSlices;	


// New images to save the different components
newImage("Cells", "16-bit Black", img_width, img_height, img_slices);
newImage("TS", "16-bit Black", img_width, img_height, img_slices);
newImage("SPOTS_IN", "16-bit Black", img_width, img_height, img_slices);
newImage("SPOTS_OUT", "16-bit Black", img_width, img_height, img_slices);


a=9;
while(a<sizespotfile-2){
	cellTS=Spotfile[a];
	cellTS=split(cellTS,"\t");
	if(cellTS[0]=="CELL"){

		//Lecture des infos de la cellule
		Cellname=Spotfile[a];
		Cellname=split(Cellname,"\t");
		Cellname=Cellname[1];

		//Position XY de la cellule
		Xpos=Spotfile[a+1];
		Xpos=split(Xpos,"\t");
		Xpos2=newArray(Xpos.length-2);
		for (i=1;i<Xpos.length-1;i++){
			Xpos2[i-1]=parseFloat(Xpos[i]);
			}
		Xpos=Xpos2;

		Ypos=Spotfile[a+2];
		Ypos=split(Ypos,"\t");
		Ypos2=newArray(Ypos.length-2);
		for (i=1;i<Ypos.length-1;i++){
			Ypos2[i-1]=parseFloat(Ypos[i]);
			}
		Ypos=Ypos2;

		if (celloutline==1)
		{
		selectImage("Cells");
		run("Line Width...", "line="+sizecell);
		run("Colors...", "foreground=" + "white");
		makeSelection("polygon", Xpos, Ypos);
		run("Draw","stack");
		makeSelection(10,newArray(0),newArray(0));
		}
	a=a+2;	
	}
	else if (cellTS[0]=="TxSite"){
		
		//Lecture des infos du TS
		TSname=Spotfile[a];
		TSname=split(TSname,"\t");
		TSname=TSname[1];

		//Position XY du TS
		XTSpos=Spotfile[a+1];
		XTSpos=split(XTSpos,"\t");
		XTSpos2=newArray(XTSpos.length-2);
		for (i=1;i<XTSpos.length-1;i++){
			XTSpos2[i-1]=XTSpos[i];
			}
		XTSpos=XTSpos2;
		
		YTSpos=Spotfile[a+2];
		YTSpos=split(YTSpos,"\t");
		YTSpos2=newArray(YTSpos.length-2);
		for (i=1;i<YTSpos.length-1;i++){
			YTSpos2[i-1]=YTSpos[i];
			}
		YTSpos=YTSpos2;
			if (TSoutline==1)
			{
			selectImage("TS");
			run("Line Width...", "line="+sizeTS);
			run("Colors...", "foreground="+"white");
			makeSelection("polygon", XTSpos, YTSpos);
			run("Draw","stack");
			makeSelection(10,newArray(0),newArray(0));
			}
	a=a+2;
	}
	if(cellTS[0]=="SPOTS"){
		a=a+2;
		cellTS=Spotfile[a];
		cellTS=split(cellTS,"\t");
		while(cellTS[0]!="CELL"&&a<sizespotfile-1){
		run("Line Width...", "line=1");
		if(cellTS[22]==0)
		{
		selectImage("SPOTS_OUT");
		run("Colors...", "foreground="+"white");
		}
		if(cellTS[22]==1)
		{
		selectImage("SPOTS_IN");
		run("Colors...", "foreground="+"white");
		}
		posy=round(cellTS[6]/pixxy)-1;
		posx=round(cellTS[7]/pixxy)-1;
		posz=round(cellTS[8]/pixz)-1;
		
			if((cellTS[22]==0&&spot0==1)||(cellTS[22]==1&&spot1==1)){
			
				if (nslice==1&&resultspotfile==1){
						setSlice(posz);
						spot(posx,posy,lenght,label_type);
				}
				
				if (nslice==3&&resultspotfile==1){
					for (i=-1;i<2;i++){
						if (posz+i>0&&posz+i<= img_slices){
						setSlice(posz+i);
						spot(posx,posy,lenght,label_type);
						}
					}
				}
				
				if (nslice==5&&resultspotfile==1){
					for (i=-2;i<3;i++){
						if (posz+i>0&&posz+i<= img_slices){
						setSlice(posz+i);
						spot(posx,posy,lenght,label_type);
						}
					}
				}

				if (nslice==7&&resultspotfile==1){
					for (i=-3;i<4;i++){
						if (posz+i>0&&posz+i<= img_slices){
						setSlice(posz+i);
						spot(posx,posy,lenght,label_type);
						}
					}
				}

			}
		
		a=a+1;
		cellTS=Spotfile[a];
		cellTS=split(cellTS,"\t");
		}
	}
	if(cellTS[0]!="CELL"){
	a++;
	}
}


// Concatenate stacks before generating a hyper-stack
run("Concatenate...", "stack1=["+Fichier+"] stack2=[Cells] title=[aux1]");
run("Concatenate...", "stack1=[aux1] stack2=[TS] title=[aux2]");
run("Concatenate...", "stack1=[aux2] stack2=[SPOTS_IN] title=[aux3]");
run("Concatenate...", "stack1=[aux3] stack2=[SPOTS_OUT] title=[FISH-QUANT Spot Detection]");

// Generate Hyperstack
run("Stack to Hyperstack...", "order=xyzct channels=5 slices="+ img_slices+ " frames=1 display=Color");


// Set Color of different channels
Stack.setChannel(1);
run(colorpicture);
       
Stack.setChannel(2);
run(colorcell);

Stack.setChannel(3);
run(colorTS);

Stack.setChannel(4);
run(colorspot1);

Stack.setChannel(5);
run(colorspot0);

// Set to composite display mode
Stack.setChannel(1);
Stack.setDisplayMode("composite");


if (maxproj==1)
{
run("Z Project...", "start=1 stop="+ img_slices +" projection=[Max Intensity]");
selectImage("RGB");

}

if (mode_again == 1)
{	again = 0;
	save(path_results+File.separator+filesave);
}
else
{	
	setBatchMode(true);	
	again = 0;

}

}

