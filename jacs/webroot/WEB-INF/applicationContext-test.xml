<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2011, J. Craig Venter Institute, Inc.
  ~
  ~ This file is part of JCVI VICS.
  ~
  ~ JCVI VICS is free software; you can redistribute it and/or modify it
  ~ under the terms and conditions of the Artistic License 2.0.  For
  ~ details, see the full text of the license in the file LICENSE.txt.  No
  ~ other rights are granted.  Any and all third party software rights to
  ~ remain with the original developer.
  ~
  ~ JCVI VICS is distributed in the hope that it will be useful in
  ~ bioinformatics applications, but it is provided "AS IS" and WITHOUT
  ~ ANY EXPRESS OR IMPLIED WARRANTIES including but not limited to
  ~ implied warranties of merchantability or fitness for any particular
  ~ purpose.  For details, see the full text of the license in the file
  ~ LICENSE.txt.
  ~
  ~ You should have received a copy of the Artistic License 2.0 along with
  ~ JCVI VICS.  If not, the license can be obtained from
  ~ "http://www.perlfoundation.org/artistic_license_2_0."
  -->

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context definition for JaCS on Hibernate.
-->
<beans>

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<bean id="propertyConfigurer" class="org.janelia.it.jacs.spring.NonForgetfulPropertyPlaceholderConfigurer">
		<property name="location" value="jacs.properties"/>
	</bean>

    <bean id="systemConfigurationProperties" class="org.janelia.it.jacs.model.common.SystemConfigurationProperties" >
        <property name="fileName" value="jacs.properties" />
    </bean>

    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="location" value="/WEB-INF/classes/camera-dbdev.properties"/>-->
    <!--</bean>-->

	<!-- Local DataSource that works in any environment -->
	<!-- Note that DriverManagerDataSource does not pool; it is not intended for production -->
	<!-- See JPetStore for an example of using Commons DBCP BasicDataSource as alternative -->
	<!-- See Image Database for an example of using C3P0 ComboPooledDataSource as alternative -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

    <!--<bean id="mooreDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
		<!--<property name="driverClassName" value="${moore.jdbc.driverClassName}"/>-->
		<!--<property name="url" value="${moore.jdbc.url}"/>-->
		<!--<property name="username" value="${moore.jdbc.username}"/>-->
		<!--<property name="password" value="${moore.jdbc.password}"/>-->
	<!--</bean>-->

    <!-- JNDI DataSource for J2EE environments -->
	<!--
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/camera"/>
	</bean>
	-->

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
        <property name="mappingJarLocations" value="jacs-model.jar" />
        <property name="hibernateProperties">
			<props>
		            <!-- JDBC connection pool (use the built-in) -->
		            <prop key="hibernate.connection.pool_size">1</prop>

		            <!-- Enable Hibernate's automatic session context management -->
		            <prop key="hibernate.current_session_context_class">thread</prop>

		            <!-- Disable the second-level cache  -->
        		      <!--<prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider</prop>-->

	 		        <!-- Update the database schema on startup -->
        			<!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
                    <!--<prop key="hibernate.hbm2ddl.auto">update</prop>-->

				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
            </props>
		</property>
		<property name="eventListeners">
			<map>
				<entry key="merge">
					<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>
				</entry>
			</map>
		</property>
	</bean>

    <!-- Separate session factory needed to MF150 MySQL database -->
    <!--<bean id="mooreSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">-->
        <!--<property name="dataSource" ref="mooreDataSource"/>-->
        <!--<property name="mappingJarLocations" value="cam-moore-model.jar"/>-->
        <!--<property name="hibernateProperties">-->
            <!--<props>-->
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->
                <!--<prop key="hibernate.show_sql">false</prop>-->
                <!--<prop key="hibernate.format_sql">true</prop>-->
                <!--<prop key="hibernate.generate_statistics">true</prop>-->
            <!--</props>-->
        <!--</property>-->
        <!--<property name="eventListeners">-->
            <!--<map>-->
                <!--<entry key="merge">-->
                    <!--<bean class="org.springframework.orm.hibernate3.support.IdTransferringMergeEventListener"/>-->
                <!--</entry>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->

        <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

</beans>
