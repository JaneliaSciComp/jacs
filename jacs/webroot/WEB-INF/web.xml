<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
   version="2.5">


<!--web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4"-->

	<display-name>JaCS</display-name>

	<description>Janelia Farm Computational Services</description>

	<!--
	  - Key of the system property that should specify the root directory of this
	  - web app. Applied by WebAppRootListener or Log4jConfigListener.
	  -->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>jacs.root</param-value>
	</context-param>

	<!--
	  - Location of the Log4J config file, for initialization and refresh checks.
	  - Applied by Log4jConfigListener.
	  -->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>

	<!--
	  - Location of the XML file that defines the root application context.
	  - Applied by ContextLoaderServlet.
		-
		- Can be set to "/WEB-INF/applicationContext-hibernate.xml" for the Hibernate
		- implementation.
	  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext-server.xml,/WEB-INF/applicationContext-common.xml</param-value>
	</context-param>

	<!--
	  - Configures Log4J for this web app.
	  - As this context specifies a context-param "log4jConfigLocation", its file path
	  - is used to load the Log4J configuration, including periodic refresh checks.
	  -
	  - Would fall back to default Log4J initialization (non-refreshing) if no special
	  - context-params are given.
	  -
	  - Exports a "web app root key", i.e. a system property that specifies the root
	  - directory of this web app, for usage in log file paths.
	  - This web app specifies "jacs.root" (see log4j.properties file).
	  -->
	<!-- Leave the listener commented-out if using JBoss -->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!--
	  - Loads the root application context of this web app at startup,
	  - by default from "/WEB-INF/applicationContext.xml".
		- Note that you need to fall back to Spring's ContextLoaderServlet for
		- J2EE servers that do not follow the Servlet 2.4 initialization order.
		-
	  - Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
	  - to access it anywhere in the web application, outside of the framework.
	  -
	  - The root context is the parent of all servlet-specific contexts.
	  - This means that its beans are automatically available in these child contexts,
	  - both for getBean(name) calls and (external) bean references.
	  -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!--
	  - Servlet that dispatches request to registered handlers (Controller implementations).
	  - Has its own application context, by default defined in "{servlet-name}-servlet.xml",
	  - i.e. "jacsweb-servlet.xml".
	  -
	  - A web app can contain any number of such servlets.
	  - Note that this web app has a shared root application context, serving as parent
	  - of all DispatcherServlet contexts.
	  -->
	<servlet>
		<servlet-name>jacsweb</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>
    <servlet>
        <servlet-name>org.janelia.it.jacs.web.gwt.blast.Blast BlastService</servlet-name>
        <servlet-class>org.janelia.it.jacs.web.gwt.blast.server.BlastServiceImpl</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>org.janelia.it.jacs.web.gwt.common.Common DataService</servlet-name>
        <servlet-class>org.janelia.it.jacs.web.gwt.common.server.DataServiceImpl</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>org.janelia.it.jacs.web.gwt.admin.editproject.EditProject ProjectService</servlet-name>
        <servlet-class>org.janelia.it.jacs.web.gwt.admin.editproject.server.ProjectServiceImpl</servlet-class>
    </servlet>
    <servlet>
        <servlet-name>org.janelia.it.jacs.web.gwt.frv.Frv RecruitmentService</servlet-name>
        <servlet-class>org.janelia.it.jacs.web.gwt.frv.server.RecruitmentServiceImpl</servlet-class>
    </servlet>

    <!--
       - Maps the jacs dispatcher to *.htm. All handler mappings in
       - jacsweb-servlet.xml will by default be applied to this subpath.
       - If a mapping isn't a /* subpath, the handler mappings are considered
       - relative to the web app root.
       -
       - NOTE: A single dispatcher can be mapped to multiple paths, like any servlet.
       -->
	<servlet-mapping>
		<servlet-name>jacsweb</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>

    <servlet-mapping>
        <servlet-name>jacsweb</servlet-name>
        <url-pattern>*.oa</url-pattern>
    </servlet-mapping>


    <servlet-mapping>
        <servlet-name>jacsweb</servlet-name>
        <url-pattern>*.srv</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>jacsweb</servlet-name>
        <url-pattern>*.oas</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>jacsweb</servlet-name>
        <url-pattern>*.chk</url-pattern>
    </servlet-mapping>

    <servlet-mapping>
        <servlet-name>jacsweb</servlet-name>
        <url-pattern>/id</url-pattern>
    </servlet-mapping>


    <servlet-mapping>
        <servlet-name>org.janelia.it.jacs.web.gwt.blast.Blast BlastService</servlet-name>
        <url-pattern>/org.janelia.it.jacs.web.gwt.blast.Blast/BlastService</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>org.janelia.it.jacs.web.gwt.common.Common DataService</servlet-name>
        <url-pattern>/org.janelia.it.jacs.web.gwt.common.Common/DataService</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>org.janelia.it.jacs.web.gwt.admin.editproject.EditProject ProjectService</servlet-name>
        <url-pattern>/org.janelia.it.jacs.web.gwt.admin.editproject.EditProject/ProjectService</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>org.janelia.it.jacs.web.gwt.frv.Frv RecruitmentService</servlet-name>
        <url-pattern>/org.janelia.it.jacs.web.gwt.frv.Frv/org.janelia.it.jacs.web.gwt.frv.Frv/RecruitmentService</url-pattern>
    </servlet-mapping>

    <!-- timeout is set for 24 hours -->
    <session-config>
		<session-timeout>1440</session-timeout>
	</session-config>

	<welcome-file-list>
		<!-- Redirects to "welcome.htm" for dispatcher handling -->
		<welcome-file>/forward.html</welcome-file>
	</welcome-file-list>

	<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<!-- Displays a stack trace -->
		<location>/WEB-INF/jsp/common/error_500.jsp</location>
	</error-page>


    <!--
        - Definition of fake login JAAS realm
    -->

    <login-config>
        <auth-method>FORM</auth-method>
        <!--<realm-name>LdapAuthentication</realm-name>-->
        <form-login-config>
            <form-login-page>/WEB-INF/jsp/LoginForm.jsp</form-login-page>
            <form-error-page>/WEB-INF/jsp/LoginFailure.jsp</form-error-page>
        </form-login-config>
    </login-config>

    <!--<login-config>-->
        <!--<auth-method>BASIC</auth-method>-->

        <!--<realm-name>LdapAuthentication</realm-name>-->
    <!--</login-config>-->

    <security-constraint>
        <display-name>VICS Web Application</display-name>
        <web-resource-collection>
            <web-resource-name>VICS Application</web-resource-name>
            <url-pattern>*.htm</url-pattern>
            <url-pattern>*.srv</url-pattern>
            <url-pattern>*.xml</url-pattern>
            <http-method>DELETE</http-method>
            <http-method>GET</http-method>
            <http-method>POST</http-method>
            <http-method>PUT</http-method>
        </web-resource-collection>
        <auth-constraint>
            <role-name>*</role-name>
        </auth-constraint>
    </security-constraint>

    <!-- have to list a whole bunch of groups out of LDAP here because
    LDAP group search only returns a list of groups where uids are listed directly -->
    <!--<security-role><role-name>tigr</role-name></security-role>-->
    <!--<security-role><role-name>jtc-cvs</role-name></security-role>-->
    <!--<security-role><role-name>jtc</role-name></security-role>-->
    <!--<security-role><role-name>cvsusers</role-name></security-role>-->
    <!--<security-role><role-name>science</role-name></security-role>-->
    <!--<security-role><role-name>prog</role-name></security-role>-->
    <!--<security-role><role-name>bioinfo</role-name></security-role>-->
    <!--<security-role><role-name>user</role-name></security-role>-->
    <security-role><role-name>jacsdata</role-name></security-role>
    <security-role><role-name>jacs-admin</role-name></security-role>

    <error-page>
        <error-code>401</error-code>
        <location>/WEB-INF/jsp/common/error_401.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/WEB-INF/jsp/common/error_403.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/jsp/common/error_404.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/jsp/common/error_500.jsp</location>
    </error-page>

</web-app>
