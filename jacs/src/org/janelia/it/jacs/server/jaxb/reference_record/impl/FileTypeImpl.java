
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-01/24/2006 06:08 PM(kohsuke)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.10.27 at 12:05:11 PM EDT 
//


package org.janelia.it.jacs.server.jaxb.reference_record.impl;

import com.sun.msv.grammar.Grammar;
import com.sun.msv.verifier.DocumentDeclaration;
import com.sun.msv.verifier.regexp.REDocumentDeclaration;
import com.sun.xml.bind.JAXBObject;
import com.sun.xml.bind.WhiteSpaceProcessor;
import com.sun.xml.bind.validator.SchemaDeserializer;
import org.janelia.it.jacs.server.jaxb.reference_record.FileType;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.AbstractUnmarshallingEventHandlerImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallableObject;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallingContext;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallingEventHandler;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.Util;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.ValidatableObject;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.XMLSerializable;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.XMLSerializer;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import javax.xml.bind.DatatypeConverter;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;

public class FileTypeImpl implements FileType, JAXBObject, UnmarshallableObject, XMLSerializable, ValidatableObject {

    protected boolean has_Tar;
    protected int _Tar;
    protected String _Description;
    protected boolean has_Size;
    protected long _Size;
    protected String _Path;
    protected String _InfoPath;
    public final static Class version = (JAXBVersion.class);
    private static Grammar schemaFragment;

    private final static Class PRIMARY_INTERFACE_CLASS() {
        return (FileType.class);
    }

    public int getTar() {
        return _Tar;
    }

    public void setTar(int value) {
        _Tar = value;
        has_Tar = true;
    }

    public String getDescription() {
        return _Description;
    }

    public void setDescription(String value) {
        _Description = value;
    }

    public long getSize() {
        return _Size;
    }

    public void setSize(long value) {
        _Size = value;
        has_Size = true;
    }

    public String getPath() {
        return _Path;
    }

    public void setPath(String value) {
        _Path = value;
    }

    public String getInfoPath() {
        return _InfoPath;
    }

    public void setInfoPath(String value) {
        _InfoPath = value;
    }

    public UnmarshallingEventHandler createUnmarshaller(UnmarshallingContext context) {
        return new FileTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(XMLSerializer context)
            throws SAXException {
    }

    public void serializeAttributes(XMLSerializer context)
            throws SAXException {
        context.startAttribute("", "description");
        try {
            context.text(((String) _Description), "Description");
        }
        catch (Exception e) {
            Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (_InfoPath != null) {
            context.startAttribute("", "info_path");
            try {
                context.text(((String) _InfoPath), "InfoPath");
            }
            catch (Exception e) {
                Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        context.startAttribute("", "path");
        try {
            context.text(((String) _Path), "Path");
        }
        catch (Exception e) {
            Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        if (has_Size) {
            context.startAttribute("", "size");
            try {
                context.text(DatatypeConverter.printLong(((long) _Size)), "Size");
            }
            catch (Exception e) {
                Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (has_Tar) {
            context.startAttribute("", "tar");
            try {
                context.text(DatatypeConverter.printInt(((int) _Tar)), "Tar");
            }
            catch (Exception e) {
                Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
    }

    public void serializeURIs(XMLSerializer context)
            throws SAXException {
    }

    public Class getPrimaryInterface() {
        return (FileType.class);
    }

    public DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = SchemaDeserializer.deserialize((
                    "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
                            + "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
                            + "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
                            + "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
                            + "expandedExpq\u0000~\u0000\u0002xpppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsq\u0000~\u0000\u0000ppsr\u0000 com.sun.msv."
                            + "grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLco"
                            + "m/sun/msv/grammar/NameClass;xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.grammar."
                            + "DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006"
                            + "exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr"
                            + "\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysV"
                            + "alidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
                            + "\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com"
                            + ".sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceU"
                            + "rit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0014L\u0000\nwhiteSpacet\u0000.Lcom/"
                            + "sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3."
                            + "org/2001/XMLSchemat\u0000\u0006stringsr\u00005com.sun.msv.datatype.xsd.Whit"
                            + "eSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype."
                            + "xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar"
                            + ".Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun."
                            + "msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0014L\u0000\fnamespaceU"
                            + "RIq\u0000~\u0000\u0014xpq\u0000~\u0000\u0018q\u0000~\u0000\u0017sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000"
                            + "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0014L\u0000\fnamespaceURIq\u0000~\u0000\u0014xr\u0000\u001dcom.sun.ms"
                            + "v.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u000bdescriptiont\u0000\u0000sr\u0000\u001dcom.sun"
                            + ".msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001ppsq\u0000~\u0000\tsr\u0000\u0011java.lang"
                            + ".Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psq\u0000~\u0000\fppsr\u0000%com.sun.msv.datat"
                            + "ype.xsd.PatternFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001[\u0000\bpatternst\u0000\u0013[Ljava/lang/Str"
                            + "ing;xr\u0000;com.sun.msv.datatype.xsd.DataTypeWithLexicalConstrai"
                            + "ntFacetT\u0090\u001c>\u001azb\u00ea\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.DataTypeWithF"
                            + "acet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0005Z\u0000\fisFacetFixedZ\u0000\u0012needValueCheckFlagL\u0000\bbaseTy"
                            + "pet\u0000)Lcom/sun/msv/datatype/xsd/XSDatatypeImpl;L\u0000\fconcreteTyp"
                            + "et\u0000\'Lcom/sun/msv/datatype/xsd/ConcreteType;L\u0000\tfacetNameq\u0000~\u0000\u0014"
                            + "xq\u0000~\u0000\u0013q\u0000~\u0000$t\u0000\u000efile_path_typeq\u0000~\u0000\u001b\u0000\u0000q\u0000~\u0000\u0016q\u0000~\u0000\u0016t\u0000\u0007patternur\u0000\u0013["
                            + "Ljava.lang.String;\u00ad\u00d2V\u00e7\u00e9\u001d{G\u0002\u0000\u0000xp\u0000\u0000\u0000\u0001t\u0000\u0012[A-Za-z0-9_\\-\\./]*q\u0000~\u0000"
                            + "\u001dsq\u0000~\u0000\u001eq\u0000~\u00002q\u0000~\u0000$sq\u0000~\u0000 t\u0000\tinfo_pathq\u0000~\u0000$sr\u00000com.sun.msv.gram"
                            + "mar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000(\u0001q\u0000~\u0000"
                            + ";sq\u0000~\u0000\tppq\u0000~\u0000*sq\u0000~\u0000 t\u0000\u0004pathq\u0000~\u0000$sq\u0000~\u0000%ppsq\u0000~\u0000\tq\u0000~\u0000)psq\u0000~\u0000\fpp"
                            + "sr\u0000*com.sun.msv.datatype.xsd.MinInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000"
                            + "#com.sun.msv.datatype.xsd.RangeFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\nlimitValue"
                            + "t\u0000\u0012Ljava/lang/Object;xr\u00009com.sun.msv.datatype.xsd.DataTypeWi"
                            + "thValueConstraintFacet\"\u00a7Ro\u00ca\u00c7\u008aT\u0002\u0000\u0000xq\u0000~\u0000.q\u0000~\u0000$t\u0000\u000bnonZeroLongsr"
                            + "\u00005com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000"
                            + "\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001a\u0000\u0000sr\u0000!com.sun.msv.datatype.xsd.LongType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
                            + "\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0001"
                            + "L\u0000\nbaseFacetsq\u0000~\u0000/xq\u0000~\u0000\u0011q\u0000~\u0000\u0017t\u0000\u0004longq\u0000~\u0000Jsr\u0000*com.sun.msv.dat"
                            + "atype.xsd.MaxInclusiveFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000Dppq\u0000~\u0000J\u0000\u0001sq\u0000~\u0000Cp"
                            + "pq\u0000~\u0000J\u0000\u0000sr\u0000$com.sun.msv.datatype.xsd.IntegerType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
                            + "q\u0000~\u0000Lq\u0000~\u0000\u0017t\u0000\u0007integerq\u0000~\u0000Jsr\u0000,com.sun.msv.datatype.xsd.Fracti"
                            + "onDigitsFacet\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001I\u0000\u0005scalexq\u0000~\u0000-ppq\u0000~\u0000J\u0001\u0000sr\u0000#com.sun.m"
                            + "sv.datatype.xsd.NumberType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0011q\u0000~\u0000\u0017t\u0000\u0007decimalq\u0000"
                            + "~\u0000Jq\u0000~\u0000Xt\u0000\u000efractionDigits\u0000\u0000\u0000\u0000q\u0000~\u0000St\u0000\fminInclusivesr\u0000\u000ejava.la"
                            + "ng.Long;\u008b\u00e4\u0090\u00cc\u008f#\u00df\u0002\u0000\u0001J\u0000\u0005valuexr\u0000\u0010java.lang.Number\u0086\u00ac\u0095\u001d\u000b\u0094\u00e0\u008b\u0002\u0000\u0000xp\u0080"
                            + "\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000St\u0000\fmaxInclusivesq\u0000~\u0000\\\u007f\u00ff\u00ff\u00ff\u00ff\u00ff\u00ff\u00ffq\u0000~\u0000Mq\u0000~\u0000[sq\u0000~\u0000\\\u0000\u0000\u0000"
                            + "\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000\u001dsq\u0000~\u0000\u001eq\u0000~\u0000Hq\u0000~\u0000$sq\u0000~\u0000 t\u0000\u0004sizeq\u0000~\u0000$q\u0000~\u0000;sq\u0000~\u0000%ppsq\u0000"
                            + "~\u0000\tq\u0000~\u0000)psq\u0000~\u0000\fppsq\u0000~\u0000Oq\u0000~\u0000$t\u0000\btar_typeq\u0000~\u0000J\u0000\u0001sq\u0000~\u0000Cq\u0000~\u0000$q\u0000~"
                            + "\u0000iq\u0000~\u0000J\u0000\u0000sr\u0000 com.sun.msv.datatype.xsd.IntType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~"
                            + "\u0000Lq\u0000~\u0000\u0017t\u0000\u0003intq\u0000~\u0000Jsq\u0000~\u0000Oppq\u0000~\u0000J\u0000\u0001sq\u0000~\u0000Cppq\u0000~\u0000J\u0000\u0000q\u0000~\u0000Mq\u0000~\u0000Mq\u0000"
                            + "~\u0000[sr\u0000\u0011java.lang.Integer\u0012\u00e2\u00a0\u00a4\u00f7\u0081\u00878\u0002\u0000\u0001I\u0000\u0005valuexq\u0000~\u0000]\u0080\u0000\u0000\u0000q\u0000~\u0000Mq\u0000"
                            + "~\u0000_sq\u0000~\u0000p\u007f\u00ff\u00ff\u00ffq\u0000~\u0000lq\u0000~\u0000[sq\u0000~\u0000p\u0000\u0000\u0000\u0000q\u0000~\u0000lq\u0000~\u0000_sq\u0000~\u0000p\u0000\u0000\u0000\u0001q\u0000~\u0000\u001dsq"
                            + "\u0000~\u0000\u001eq\u0000~\u0000iq\u0000~\u0000$sq\u0000~\u0000 t\u0000\u0003tarq\u0000~\u0000$q\u0000~\u0000;sr\u0000\"com.sun.msv.grammar."
                            + "ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/"
                            + "ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Expressi"
                            + "onPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006paren"
                            + "tt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0007\u0001pq\u0000~\u0000\u0007q\u0000~\u0000\u0006q\u0000"
                            + "~\u0000\u0005q\u0000~\u0000@q\u0000~\u0000\bq\u0000~\u0000&q\u0000~\u0000ex"));
        }
        return new REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
            extends AbstractUnmarshallingEventHandlerImpl {


        public Unmarshaller(UnmarshallingContext context) {
            super(context, "----------------");
        }

        protected Unmarshaller(UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public Object owner() {
            return FileTypeImpl.this;
        }

        public void enterElement(String ___uri, String ___local, String ___qname, Attributes __atts)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 9:
                        attIdx = context.getAttribute("", "size");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText1(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case 12:
                        attIdx = context.getAttribute("", "tar");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText2(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case 15:
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return;
                    case 0:
                        attIdx = context.getAttribute("", "description");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case 3:
                        attIdx = context.getAttribute("", "info_path");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case 6:
                        attIdx = context.getAttribute("", "path");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText5(v);
                            continue outer;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final String value)
                throws SAXException {
            try {
                _Size = DatatypeConverter.parseLong(WhiteSpaceProcessor.collapse(value));
                has_Size = true;
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final String value)
                throws SAXException {
            try {
                _Tar = DatatypeConverter.parseInt(WhiteSpaceProcessor.collapse(value));
                has_Tar = true;
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText3(final String value)
                throws SAXException {
            try {
                _Description = value;
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText4(final String value)
                throws SAXException {
            try {
                _InfoPath = value;
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText5(final String value)
                throws SAXException {
            try {
                _Path = value;
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 9:
                        attIdx = context.getAttribute("", "size");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText1(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case 12:
                        attIdx = context.getAttribute("", "tar");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText2(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case 15:
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return;
                    case 0:
                        attIdx = context.getAttribute("", "description");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case 3:
                        attIdx = context.getAttribute("", "info_path");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case 6:
                        attIdx = context.getAttribute("", "path");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText5(v);
                            continue outer;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 9:
                        if (("size" == ___local) && ("" == ___uri)) {
                            state = 10;
                            return;
                        }
                        state = 12;
                        continue outer;
                    case 12:
                        if (("tar" == ___local) && ("" == ___uri)) {
                            state = 13;
                            return;
                        }
                        state = 15;
                        continue outer;
                    case 15:
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return;
                    case 0:
                        if (("description" == ___local) && ("" == ___uri)) {
                            state = 1;
                            return;
                        }
                        break;
                    case 3:
                        if (("info_path" == ___local) && ("" == ___uri)) {
                            state = 4;
                            return;
                        }
                        state = 6;
                        continue outer;
                    case 6:
                        if (("path" == ___local) && ("" == ___uri)) {
                            state = 7;
                            return;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 14:
                        if (("tar" == ___local) && ("" == ___uri)) {
                            state = 15;
                            return;
                        }
                        break;
                    case 2:
                        if (("description" == ___local) && ("" == ___uri)) {
                            state = 3;
                            return;
                        }
                        break;
                    case 9:
                        attIdx = context.getAttribute("", "size");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 12;
                            eatText1(v);
                            continue outer;
                        }
                        state = 12;
                        continue outer;
                    case 12:
                        attIdx = context.getAttribute("", "tar");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 15;
                            eatText2(v);
                            continue outer;
                        }
                        state = 15;
                        continue outer;
                    case 15:
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return;
                    case 11:
                        if (("size" == ___local) && ("" == ___uri)) {
                            state = 12;
                            return;
                        }
                        break;
                    case 8:
                        if (("path" == ___local) && ("" == ___uri)) {
                            state = 9;
                            return;
                        }
                        break;
                    case 0:
                        attIdx = context.getAttribute("", "description");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText3(v);
                            continue outer;
                        }
                        break;
                    case 3:
                        attIdx = context.getAttribute("", "info_path");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText4(v);
                            continue outer;
                        }
                        state = 6;
                        continue outer;
                    case 5:
                        if (("info_path" == ___local) && ("" == ___uri)) {
                            state = 6;
                            return;
                        }
                        break;
                    case 6:
                        attIdx = context.getAttribute("", "path");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 9;
                            eatText5(v);
                            continue outer;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final String value)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case 7:
                            state = 8;
                            eatText5(value);
                            return;
                        case 9:
                            attIdx = context.getAttribute("", "size");
                            if (attIdx >= 0) {
                                final String v = context.eatAttribute(attIdx);
                                state = 12;
                                eatText1(v);
                                continue outer;
                            }
                            state = 12;
                            continue outer;
                        case 1:
                            state = 2;
                            eatText3(value);
                            return;
                        case 12:
                            attIdx = context.getAttribute("", "tar");
                            if (attIdx >= 0) {
                                final String v = context.eatAttribute(attIdx);
                                state = 15;
                                eatText2(v);
                                continue outer;
                            }
                            state = 15;
                            continue outer;
                        case 15:
                            revertToParentFromText(value);
                            return;
                        case 13:
                            state = 14;
                            eatText2(value);
                            return;
                        case 4:
                            state = 5;
                            eatText4(value);
                            return;
                        case 10:
                            state = 11;
                            eatText1(value);
                            return;
                        case 0:
                            attIdx = context.getAttribute("", "description");
                            if (attIdx >= 0) {
                                final String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText3(v);
                                continue outer;
                            }
                            break;
                        case 3:
                            attIdx = context.getAttribute("", "info_path");
                            if (attIdx >= 0) {
                                final String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText4(v);
                                continue outer;
                            }
                            state = 6;
                            continue outer;
                        case 6:
                            attIdx = context.getAttribute("", "path");
                            if (attIdx >= 0) {
                                final String v = context.eatAttribute(attIdx);
                                state = 9;
                                eatText5(v);
                                continue outer;
                            }
                            break;
                    }
                }
                catch (RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
