
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-01/24/2006 06:08 PM(kohsuke)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.10.27 at 12:05:11 PM EDT 
//


package org.janelia.it.jacs.server.jaxb.reference_record.impl;

import com.sun.msv.grammar.Grammar;
import com.sun.msv.verifier.DocumentDeclaration;
import com.sun.msv.verifier.regexp.REDocumentDeclaration;
import com.sun.xml.bind.JAXBObject;
import com.sun.xml.bind.validator.SchemaDeserializer;
import org.janelia.it.jacs.server.jaxb.reference_record.TextType;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.AbstractUnmarshallingEventHandlerImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallableObject;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallingContext;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallingEventHandler;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.Util;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.ValidatableObject;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.XMLSerializable;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.XMLSerializer;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import java.lang.Class;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;

public class TextTypeImpl implements TextType, JAXBObject, UnmarshallableObject, XMLSerializable, ValidatableObject {

    protected String _Local;
    protected String _URL;
    public final static Class version = (JAXBVersion.class);
    private static Grammar schemaFragment;

    private final static Class PRIMARY_INTERFACE_CLASS() {
        return (TextType.class);
    }

    public String getLocal() {
        return _Local;
    }

    public void setLocal(String value) {
        _Local = value;
    }

    public String getURL() {
        return _URL;
    }

    public void setURL(String value) {
        _URL = value;
    }

    public UnmarshallingEventHandler createUnmarshaller(UnmarshallingContext context) {
        return new TextTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(XMLSerializer context)
            throws SAXException {
    }

    public void serializeAttributes(XMLSerializer context)
            throws SAXException {
        context.startAttribute("", "URL");
        try {
            context.text(((String) _URL), "URL");
        }
        catch (Exception e) {
            Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        context.startAttribute("", "local");
        try {
            context.text(((String) _Local), "Local");
        }
        catch (Exception e) {
            Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
    }

    public void serializeURIs(XMLSerializer context)
            throws SAXException {
    }

    public Class getPrimaryInterface() {
        return (TextType.class);
    }

    public DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = SchemaDeserializer.deserialize((
                    "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
                            + "n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
                            + "mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
                            + "on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000b"
                            + "expandedExpq\u0000~\u0000\u0002xpppsr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000"
                            + "\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameCl"
                            + "ass;xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt"
                            + "\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLco"
                            + "m/sun/msv/util/StringPair;xq\u0000~\u0000\u0003ppsr\u0000%com.sun.msv.datatype.x"
                            + "sd.SimpleURType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.Built"
                            + "inAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.Concrete"
                            + "Type\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000"
                            + "\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000"
                            + "\u0011L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcess"
                            + "or;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\ranySimpleTypesr\u00005"
                            + "com.sun.msv.datatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
                            + "\u0001\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
                            + "\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000"
                            + "\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003ppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000"
                            + "\tlocalNameq\u0000~\u0000\u0011L\u0000\fnamespaceURIq\u0000~\u0000\u0011xpq\u0000~\u0000\u0015q\u0000~\u0000\u0014sr\u0000#com.sun.m"
                            + "sv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0011L\u0000\fnam"
                            + "espaceURIq\u0000~\u0000\u0011xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp"
                            + "t\u0000\u0003URLt\u0000\u0000sq\u0000~\u0000\u0006ppq\u0000~\u0000\fsq\u0000~\u0000\u001dt\u0000\u0005localq\u0000~\u0000!sr\u0000\"com.sun.msv.gra"
                            + "mmar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/gra"
                            + "mmar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.Exp"
                            + "ressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000\u0005countB\u0000\rstreamVersionL\u0000\u0006"
                            + "parentt\u0000$Lcom/sun/msv/grammar/ExpressionPool;xp\u0000\u0000\u0000\u0001\u0001pq\u0000~\u0000\u0005x"));
        }
        return new REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
            extends AbstractUnmarshallingEventHandlerImpl {


        public Unmarshaller(UnmarshallingContext context) {
            super(context, "-------");
        }

        protected Unmarshaller(UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public Object owner() {
            return TextTypeImpl.this;
        }

        public void enterElement(String ___uri, String ___local, String ___qname, Attributes __atts)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 6:
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return;
                    case 3:
                        attIdx = context.getAttribute("", "local");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case 0:
                        attIdx = context.getAttribute("", "URL");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final String value)
                throws SAXException {
            try {
                _Local = value;
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

        private void eatText2(final String value)
                throws SAXException {
            try {
                _URL = value;
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 6:
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return;
                    case 3:
                        attIdx = context.getAttribute("", "local");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case 0:
                        attIdx = context.getAttribute("", "URL");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 6:
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return;
                    case 3:
                        if (("local" == ___local) && ("" == ___uri)) {
                            state = 4;
                            return;
                        }
                        break;
                    case 0:
                        if (("URL" == ___local) && ("" == ___uri)) {
                            state = 1;
                            return;
                        }
                        break;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 6:
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return;
                    case 3:
                        attIdx = context.getAttribute("", "local");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 6;
                            eatText1(v);
                            continue outer;
                        }
                        break;
                    case 5:
                        if (("local" == ___local) && ("" == ___uri)) {
                            state = 6;
                            return;
                        }
                        break;
                    case 2:
                        if (("URL" == ___local) && ("" == ___uri)) {
                            state = 3;
                            return;
                        }
                        break;
                    case 0:
                        attIdx = context.getAttribute("", "URL");
                        if (attIdx >= 0) {
                            final String v = context.eatAttribute(attIdx);
                            state = 3;
                            eatText2(v);
                            continue outer;
                        }
                        break;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final String value)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case 1:
                            state = 2;
                            eatText2(value);
                            return;
                        case 6:
                            revertToParentFromText(value);
                            return;
                        case 3:
                            attIdx = context.getAttribute("", "local");
                            if (attIdx >= 0) {
                                final String v = context.eatAttribute(attIdx);
                                state = 6;
                                eatText1(v);
                                continue outer;
                            }
                            break;
                        case 4:
                            state = 5;
                            eatText1(value);
                            return;
                        case 0:
                            attIdx = context.getAttribute("", "URL");
                            if (attIdx >= 0) {
                                final String v = context.eatAttribute(attIdx);
                                state = 3;
                                eatText2(v);
                                continue outer;
                            }
                            break;
                    }
                }
                catch (RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

    }

}
