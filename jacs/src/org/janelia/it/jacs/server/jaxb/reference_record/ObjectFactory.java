
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-01/24/2006 06:08 PM(kohsuke)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.10.27 at 12:05:11 PM EDT 
//


package org.janelia.it.jacs.server.jaxb.reference_record;


import org.janelia.it.jacs.server.jaxb.reference_record.impl.FileImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.FileTypeImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.JAXBVersion;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.SubdirImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.SubdirTypeImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.TextTypeImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.DefaultJAXBContextImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.GrammarInfo;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.GrammarInfoImpl;

import javax.xml.bind.JAXBException;
import javax.xml.bind.PropertyException;
import javax.xml.namespace.QName;
import java.lang.Class;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the org.janelia.it.jacs.server.jaxb.reference_record package.
 * <p>An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 */
public class ObjectFactory
        extends DefaultJAXBContextImpl {

    private static HashMap defaultImplementations = new HashMap(19, 0.75F);
    private static HashMap rootTagMap = new HashMap();
    public final static GrammarInfo grammarInfo = new GrammarInfoImpl(rootTagMap, defaultImplementations, (ObjectFactory.class));
    public final static Class version = (JAXBVersion.class);

    static {
        defaultImplementations.put((Subdir.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.SubdirImpl");
        defaultImplementations.put((SubdirType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.SubdirTypeImpl");
        defaultImplementations.put((ReferenceRecordType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl");
        defaultImplementations.put((ReferenceRecordType.PublicationType.DateType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl$PublicationTypeImpl$DateTypeImpl");
        defaultImplementations.put((ReferenceRecordType.PublicationType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl$PublicationTypeImpl");
        defaultImplementations.put((ReferenceRecordType.PublicationType.JournalType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl$PublicationTypeImpl$JournalTypeImpl");
        defaultImplementations.put((File.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.FileImpl");
        defaultImplementations.put((ReferenceRecordType.DataType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl$DataTypeImpl");
        defaultImplementations.put((FileType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.FileTypeImpl");
        defaultImplementations.put((ReferenceRecordType.AuthorsType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl$AuthorsTypeImpl");
        defaultImplementations.put((ReferenceRecord.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordImpl");
        defaultImplementations.put((TextType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.TextTypeImpl");
        defaultImplementations.put((ReferenceRecordType.CombinedDataType.class), "org.janelia.it.jacs.server.jaxb.reference_record.impl.ReferenceRecordTypeImpl$CombinedDataTypeImpl");
        rootTagMap.put(new QName("", "subdir"), (Subdir.class));
        rootTagMap.put(new QName("", "file"), (File.class));
        rootTagMap.put(new QName("", "reference_record"), (ReferenceRecord.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.janelia.it.jacs.server.jaxb.reference_record
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     *
     * @param javaContentInterface the Class object of the javacontent interface to instantiate
     * @return a new instance
     * @throws JAXBException if an error occurs
     */
    public Object newInstance(Class javaContentInterface)
            throws JAXBException {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     *
     * @param name the name of the property to retrieve
     * @return the value of the requested property
     * @throws PropertyException when there is an error retrieving the given property or value
     */
    public Object getProperty(String name)
            throws PropertyException {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     *
     * @param value the value of the property to be set
     * @param name  the name of the property to retrieve
     * @throws PropertyException when there is an error processing the given property or value
     */
    public void setProperty(String name, Object value)
            throws PropertyException {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of Subdir
     *
     * @throws JAXBException if an error occurs
     */
    public Subdir createSubdir()
            throws JAXBException {
        return new SubdirImpl();
    }

    /**
     * Create an instance of SubdirType
     *
     * @throws JAXBException if an error occurs
     */
    public SubdirType createSubdirType()
            throws JAXBException {
        return new SubdirTypeImpl();
    }

    /**
     * Create an instance of ReferenceRecordType
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecordType createReferenceRecordType()
            throws JAXBException {
        return new ReferenceRecordTypeImpl();
    }

    /**
     * Create an instance of ReferenceRecordTypePublicationTypeDateType
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecordType.PublicationType.DateType createReferenceRecordTypePublicationTypeDateType()
            throws JAXBException {
        return new ReferenceRecordTypeImpl.PublicationTypeImpl.DateTypeImpl();
    }

    /**
     * Create an instance of ReferenceRecordTypePublicationType
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecordType.PublicationType createReferenceRecordTypePublicationType()
            throws JAXBException {
        return new ReferenceRecordTypeImpl.PublicationTypeImpl();
    }

    /**
     * Create an instance of ReferenceRecordTypePublicationTypeJournalType
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecordType.PublicationType.JournalType createReferenceRecordTypePublicationTypeJournalType()
            throws JAXBException {
        return new ReferenceRecordTypeImpl.PublicationTypeImpl.JournalTypeImpl();
    }

    /**
     * Create an instance of File
     *
     * @throws JAXBException if an error occurs
     */
    public File createFile()
            throws JAXBException {
        return new FileImpl();
    }

    /**
     * Create an instance of ReferenceRecordTypeDataType
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecordType.DataType createReferenceRecordTypeDataType()
            throws JAXBException {
        return new ReferenceRecordTypeImpl.DataTypeImpl();
    }

    /**
     * Create an instance of FileType
     *
     * @throws JAXBException if an error occurs
     */
    public FileType createFileType()
            throws JAXBException {
        return new FileTypeImpl();
    }

    /**
     * Create an instance of ReferenceRecordTypeAuthorsType
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecordType.AuthorsType createReferenceRecordTypeAuthorsType()
            throws JAXBException {
        return new ReferenceRecordTypeImpl.AuthorsTypeImpl();
    }

    /**
     * Create an instance of ReferenceRecord
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecord createReferenceRecord()
            throws JAXBException {
        return new ReferenceRecordImpl();
    }

    /**
     * Create an instance of TextType
     *
     * @throws JAXBException if an error occurs
     */
    public TextType createTextType()
            throws JAXBException {
        return new TextTypeImpl();
    }

    /**
     * Create an instance of ReferenceRecordTypeCombinedDataType
     *
     * @throws JAXBException if an error occurs
     */
    public ReferenceRecordType.CombinedDataType createReferenceRecordTypeCombinedDataType()
            throws JAXBException {
        return new ReferenceRecordTypeImpl.CombinedDataTypeImpl();
    }

}
