
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.6-01/24/2006 06:08 PM(kohsuke)-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.10.13 at 01:45:00 PM EDT 
//


package org.janelia.it.jacs.server.jaxb.reference_record.impl;

import com.sun.msv.grammar.Grammar;
import com.sun.msv.verifier.DocumentDeclaration;
import com.sun.msv.verifier.regexp.REDocumentDeclaration;
import com.sun.xml.bind.JAXBObject;
import com.sun.xml.bind.util.ListImpl;
import com.sun.xml.bind.validator.SchemaDeserializer;
import org.janelia.it.jacs.server.jaxb.reference_record.AnyType;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.AbstractUnmarshallingEventHandlerImpl;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallableObject;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallingContext;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.UnmarshallingEventHandler;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.Util;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.ValidatableObject;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.XMLSerializable;
import org.janelia.it.jacs.server.jaxb.reference_record.impl.runtime.XMLSerializer;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;

import java.lang.Class;
import java.lang.Exception;
import java.lang.Object;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;

public class AnyTypeImpl implements AnyType, JAXBObject, UnmarshallableObject, XMLSerializable, ValidatableObject {

    protected ListImpl _Content;
    public final static Class version = (JAXBVersion.class);
    private static Grammar schemaFragment;

    private final static Class PRIMARY_INTERFACE_CLASS() {
        return (AnyType.class);
    }

    protected ListImpl _getContent() {
        if (_Content == null) {
            _Content = new ListImpl(new ArrayList());
        }
        return _Content;
    }

    public List getContent() {
        return _getContent();
    }

    public UnmarshallingEventHandler createUnmarshaller(UnmarshallingContext context) {
        return new AnyTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(XMLSerializer context)
            throws SAXException {
        int idx1 = 0;
        final int len1 = ((_Content == null) ? 0 : _Content.size());
        while (idx1 != len1) {
            {
                Object o = _Content.get(idx1);
                if (o instanceof String) {
                    try {
                        context.text(((String) _Content.get(idx1++)), "Content");
                    }
                    catch (Exception e) {
                        Util.handlePrintConversionException(this, e, context);
                    }
                }
                else {
                    if (o instanceof Object) {
                        context.childAsBody(((JAXBObject) _Content.get(idx1++)), "Content");
                    }
                    else {
                        Util.handleTypeMismatchError(context, this, "Content", o);
                    }
                }
            }
        }
    }

    public void serializeAttributes(XMLSerializer context)
            throws SAXException {
        int idx1 = 0;
        final int len1 = ((_Content == null) ? 0 : _Content.size());
        while (idx1 != len1) {
            {
                Object o = _Content.get(idx1);
                if (o instanceof String) {
                    try {
                        idx1 += 1;
                    }
                    catch (Exception e) {
                        Util.handlePrintConversionException(this, e, context);
                    }
                }
                else {
                    if (o instanceof Object) {
                        idx1 += 1;
                    }
                    else {
                        Util.handleTypeMismatchError(context, this, "Content", o);
                    }
                }
            }
        }
    }

    public void serializeURIs(XMLSerializer context)
            throws SAXException {
        int idx1 = 0;
        final int len1 = ((_Content == null) ? 0 : _Content.size());
        while (idx1 != len1) {
            {
                Object o = _Content.get(idx1);
                if (o instanceof String) {
                    try {
                        idx1 += 1;
                    }
                    catch (Exception e) {
                        Util.handlePrintConversionException(this, e, context);
                    }
                }
                else {
                    if (o instanceof Object) {
                        idx1 += 1;
                    }
                    else {
                        Util.handleTypeMismatchError(context, this, "Content", o);
                    }
                }
            }
        }
    }

    public Class getPrimaryInterface() {
        return (AnyType.class);
    }

    public DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = SchemaDeserializer.deserialize((
                    "\u00ac\u00ed\u0000\u0005sr\u0000\u001ccom.sun.msv.grammar.MixedExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.m"
                            + "sv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expt\u0000 Lcom/sun/msv/grammar/"
                            + "Expression;xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0002L\u0000\u0013e"
                            + "psilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002x"
                            + "pppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.m"
                            + "sv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1q\u0000~\u0000\u0002L\u0000\u0004exp2q\u0000~\u0000\u0002xq\u0000~\u0000"
                            + "\u0003ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001sr\u0000\u0011"
                            + "java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\'com.sun.msv.gram"
                            + "mar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/ms"
                            + "v/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000"
                            + "\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003"
                            + "q\u0000~\u0000\fp\u0000sr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003exp"
                            + "q\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u000exq\u0000~\u0000\u0003ppsr\u00002com.sun.msv.grammar.Expres"
                            + "sion$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003sq\u0000~\u0000\u000b\u0001q\u0000~\u0000\u0014sr\u0000 com"
                            + ".sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.gram"
                            + "mar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u0000&com.sun.msv.grammar.NamespaceN"
                            + "ameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\fnamespaceURIt\u0000\u0012Ljava/lang/String;xq\u0000~\u0000"
                            + "\u0017t\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssr\u00000com.sun.m"
                            + "sv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003q\u0000~\u0000"
                            + "\u0015q\u0000~\u0000\u001esr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bex"
                            + "pTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr"
                            + "\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0003\u0000\u0003I\u0000"
                            + "\u0005countB\u0000\rstreamVersionL\u0000\u0006parentt\u0000$Lcom/sun/msv/grammar/Expre"
                            + "ssionPool;xp\u0000\u0000\u0000\u0003\u0001pq\u0000~\u0000\bq\u0000~\u0000\nq\u0000~\u0000\u0005x"));
        }
        return new REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
            extends AbstractUnmarshallingEventHandlerImpl {


        public Unmarshaller(UnmarshallingContext context) {
            super(context, "-");
        }

        protected Unmarshaller(UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public Object owner() {
            return AnyTypeImpl.this;
        }

        public void enterElement(String ___uri, String ___local, String ___qname, Attributes __atts)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 0:
                        if (true) {
                            Object co = spawnWildcard(0, ___uri, ___local, ___qname, __atts);
                            if (co != null) {
                                _getContent().add(co);
                            }
                            return;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        public void leaveElement(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 0:
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 0:
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(String ___uri, String ___local, String ___qname)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case 0:
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final String value)
                throws SAXException {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case 0:
                            state = 0;
                            eatText1(value);
                            return;
                    }
                }
                catch (RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText1(final String value)
                throws SAXException {
            try {
                _getContent().add(value);
            }
            catch (Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
