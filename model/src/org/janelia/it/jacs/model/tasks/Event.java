/*
 * Copyright (c) 2010-2011, J. Craig Venter Institute, Inc.
 *
 * This file is part of JCVI VICS.
 *
 * JCVI VICS is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the Artistic License 2.0.  For
 * details, see the full text of the license in the file LICENSE.txt.  No
 * other rights are granted.  Any and all third party software rights to
 * remain with the original developer.
 *
 * JCVI VICS is distributed in the hope that it will be useful in
 * bioinformatics applications, but it is provided "AS IS" and WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTIES including but not limited to
 * implied warranties of merchantability or fitness for any particular
 * purpose.  For details, see the full text of the license in the file
 * LICENSE.txt.
 *
 * You should have received a copy of the Artistic License 2.0 along with
 * JCVI VICS.  If not, the license can be obtained from
 * "http://www.perlfoundation.org/artistic_license_2_0."
 */

package org.janelia.it.jacs.model.tasks;
// Generated Aug 17, 2006 3:17:24 PM by Hibernate Tools 3.2.0.beta6a

import com.google.gwt.user.client.rpc.IsSerializable;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Event generated by hbm2java
 */
public class Event implements java.io.Serializable, IsSerializable {

    // Common event types
    transient public static final String CREATED_EVENT = "created";
    transient public static final String PENDING_EVENT = "pending";
    transient public static final String GENERATING_EVENT = "generating";
    transient public static final String COMPLETED_EVENT = "completed";
    transient public static final String CANCELED_EVENT = "canceled";
    transient public static final String ERROR_EVENT = "error";
    transient public static final String DELETED_EVENT = "deleted";
    transient public static final String RUNNING_EVENT = "running";
    transient public static final String RESUBMIT_EVENT = "resubmitted";
    transient public static final String POSTPROCESS_EVENT = "postprocess";
    transient public static final String MERGING_EVENT = "merging";
    transient public static final String FORMAT_EVENT = "format";
    transient public static final String METADATA_EVENT = "metadata";
    transient public static final String SUBTASKCOMPLETED_EVENT = "subtask-completed";
    transient public static final String SUBTASKERROR_EVENT = "subtask-error";
    transient public static final String SUBTASKRUNNING_EVENT = "subtask-running";

    transient public static final String RECRUITING_EVENT = "recruiting";
    transient public static final String GENERATING_IMAGES_EVENT = "generating images";
    transient public static final String FASTA_GENERATION_EVENT = "generating FASTA";

    // Fields
    private Task task;
    private int eventIndex;
    private String description;
    private Date timestamp;
    private String eventType;

    private static Set validEvents = new HashSet();

    static {
        validEvents.add(CREATED_EVENT);
        validEvents.add(PENDING_EVENT);
        validEvents.add(GENERATING_EVENT);
        validEvents.add(COMPLETED_EVENT);
        validEvents.add(CANCELED_EVENT);
        validEvents.add(ERROR_EVENT);
        validEvents.add(DELETED_EVENT);
        validEvents.add(RUNNING_EVENT);
        validEvents.add(RESUBMIT_EVENT);
        validEvents.add(POSTPROCESS_EVENT);
        validEvents.add(MERGING_EVENT);
        validEvents.add(FORMAT_EVENT);
        validEvents.add(METADATA_EVENT);
        validEvents.add(SUBTASKCOMPLETED_EVENT);
        validEvents.add(SUBTASKERROR_EVENT);
        validEvents.add(SUBTASKRUNNING_EVENT);
        validEvents.add(RECRUITING_EVENT);
        validEvents.add(GENERATING_IMAGES_EVENT);
        validEvents.add(FASTA_GENERATION_EVENT);
    }
    // Constructors

    /**
     * default constructor
     */
    public Event() {
    }

    /**
     * full constructor
     */
    public Event(String description, Date timestamp, String eventType) {
        this.description = description;
        this.timestamp = timestamp;
        this.eventType = eventType;
    }

    public Task getTask() {
        return task;
    }

    public void setTask(Task task) {
        this.task = task;
    }

    public int getEventIndex() {
        return eventIndex;
    }

    public void setEventIndex(int eventIndex) {
        this.eventIndex = eventIndex;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Date getTimestamp() {
        return this.timestamp;
    }

    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    public String getEventType() {
        return this.eventType;
    }

    public void setEventType(String eventType) {
        this.eventType = eventType;
    }

    public String toString() {
        return "Event{" +
                "description='" + description + '\'' +
                ", timestamp=" + timestamp +
                ", eventType='" + eventType +
                '}';
    }

    /**
     * Events and status are synonymous.  You cannot generate the same
     * event twice for the same task.  The database won't let you do that.  Every new
     * status needs to be accounted for.
     *
     * @param status
     * @return
     */
    public static boolean isValid(String status) {
        return validEvents.contains(status);
    }

    public static Set getValidStatuses() {
        return validEvents;
    }
}


