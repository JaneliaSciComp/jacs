<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2010-2011, J. Craig Venter Institute, Inc.
  ~
  ~ This file is part of JCVI VICS.
  ~
  ~ JCVI VICS is free software; you can redistribute it and/or modify it
  ~ under the terms and conditions of the Artistic License 2.0.  For
  ~ details, see the full text of the license in the file LICENSE.txt.  No
  ~ other rights are granted.  Any and all third party software rights to
  ~ remain with the original developer.
  ~
  ~ JCVI VICS is distributed in the hope that it will be useful in
  ~ bioinformatics applications, but it is provided "AS IS" and WITHOUT
  ~ ANY EXPRESS OR IMPLIED WARRANTIES including but not limited to
  ~ implied warranties of merchantability or fitness for any particular
  ~ purpose.  For details, see the full text of the license in the file
  ~ LICENSE.txt.
  ~
  ~ You should have received a copy of the Artistic License 2.0 along with
  ~ JCVI VICS.  If not, the license can be obtained from
  ~ "http://www.perlfoundation.org/artistic_license_2_0."
  -->

<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping schema="flyportal"
				   package="org.janelia.it.jacs.model.genomics">

    <resultset name="searchJobInfoMapping">
    <return-scalar column="taskId" type="long"/>
    <return-scalar column="jobName" type="string"/>
    <return-scalar column="query" type="string"/>
    <return-scalar column="searchTopic" type="string"/>
    <return alias="first_event" class="org.janelia.it.jacs.model.tasks.Event"/>
    <return alias="last_event" class="org.janelia.it.jacs.model.tasks.Event"/>
</resultset>

<resultset name="taskParameterPvoStringMapping">
    <return-scalar column="task_id" type="long"/>
    <return-scalar column="parameters" type="string"/>
</resultset>

    <query name="findBioSequenceByAccession"><![CDATA[
        select bse.bioSequence
        from BaseSequenceEntity bse
        inner join bse.bioSequence seq
        where bse.cameraAcc = :accesion
    ]]></query>

    <query name="findBioSequenceByBseEntityId"><![CDATA[
        select bse.bioSequence
        from BaseSequenceEntity bse
        inner join bse.bioSequence seq
        where bse.entityId = :entityId
    ]]></query>

    <query name="findBlastResultNodeByTaskId"><![CDATA[
        select brn
        from BlastResultNode brn inner join brn.task task
        where task.objectId= :taskId
    ]]></query>

    <query name="findBlastResultFileNodeByTaskId"><![CDATA[
        select brfn
        from BlastResultFileNode brfn inner join brfn.task task
        where task.objectId= :taskId
    ]]></query>

    <query name="findBlastHitCountByTaskId"><![CDATA[
        select brfn.blastHitCount
        from BlastResultFileNode brfn inner join brfn.task task
        where task.objectId= :taskId
    ]]></query>

    <query name="findBlastHitsByBlastHitId"><![CDATA[
        select bh
        from BlastHit bh
        where bh.blastHitId = :blastHitId
    ]]></query>

    <query name="findDeflinesByCameraAccSet"><![CDATA[
        select bse.cameraAcc, bse.defline as description
        from BaseSequenceEntity bse
        where bse.cameraAcc = :cameraAcc
    ]]></query>

    <query name="findDistinctQueryEntitiesByResultNode"><![CDATA[
        select distinct al, qry
        from BlastHit al left outer join al.queryEntity qry
        where al.resultNode.objectId = :resultNodeId
    ]]></query>

    <query name="findDistinctSubjectEntitiesByResultNode"><![CDATA[
        select distinct subject
        from BlastHit al inner join al.subjectEntity subject
        where al.resultNode.objectId = :resultNodeId
    ]]></query>

    <query name="findEntityIdsByCameraAccSet"><![CDATA[
        select bse.cameraAcc, bse
        from BaseSequenceEntity bse
        where bse.cameraAcc in (:cameraAcc)
    ]]></query>

    <query name="findLibraryByBseEntityId"><![CDATA[
        select lib
        from Read read inner join read.library lib
        where read.entityId = :entityId
    ]]></query>

    <query name="findNodeByName"><![CDATA[
        select node
        from Node node
        where node.name = :name
    ]]></query>

    <query name="findBlastDatabaseNodeByName"><![CDATA[
        select node
        from BlastDatabaseFileNode node
        where node.name = :name
    ]]></query>

    <query name="findQueryEntityByBlastHitId"><![CDATA[
        select query
        from BlastHit al inner join al.queryEntity query
        where al.blastHitId = :alignment_id
    ]]></query>

    <query name="findReadByAccesion"><![CDATA[
        from Read read
        where read.cameraAcc = :accesion
    ]]></query>

    <query name="findPairedReadsByAccession"><![CDATA[
        select matedRead
        from Read read, Read matedRead
        where read.cameraAcc = :accesion
         and read.templateAcc = matedRead.templateAcc
         and read.libraryAcc = matedRead.libraryAcc
         and matedRead.entityId != read.entityId
    ]]></query>

    <query name="findPairedReadsByEntityId"><![CDATA[
        select matedRead
        from Read read, Read matedRead
        where read.entityId = :entityId
         and read.templateAcc = matedRead.templateAcc
         and read.libraryAcc = matedRead.libraryAcc
         and matedRead.entityId != read.entityId
    ]]></query>

    <query name="findReadByBlastHitId"><![CDATA[
        select rd.entityId, rd
        from BlastHit al, Read rd
        where al.blastHitId = :blastHitId
            and rd.cameraAcc = al.subjectAcc
    ]]></query>

    <query name="findReadByBseEntityId"><![CDATA[
        from Read read
        where read.entityId = :entityId
    ]]></query>

    <query name="findReadByResultNode"><![CDATA[
        select rd.entityId, rd
        from BlastHit al, Read rd
        where al.resultNode.objectId = :resultNodeId
            and rd.cameraAcc = al.subjectAcc
    ]]></query>

    <query name="findReadWithLibraryByAccesion"><![CDATA[
        select read
        from Read read
        inner join fetch read.library
        where read.cameraAcc = :accesion
    ]]></query>

    <query name="findReadWithLibraryByBseEntityId"><![CDATA[
        select read
        from Read read
        inner join fetch read.library
        where read.entityId = :entityId
    ]]></query>

    <query name="findReadWithSequenceByBseEntityId"><![CDATA[
        select read
        from Read read
        inner join fetch read.bioSequence
        where read.entityId = :entityId
    ]]></query>

    <query name="findResultNodeIdByBlastHitId"><![CDATA[
        select al.resultNode.objectId
        from BlastHit al
        where al.blastHitId = :alignment_id
    ]]></query>

    <query name="findSamplesByLibraryId"><![CDATA[
        select sample
        from Library lib
        inner join lib.sample sample
        where lib.libraryId = :libraryId
    ]]></query>

    <query name="findSamplesWithSitesByLibraryId"><![CDATA[
        select sample
        from Library lib
        inner join lib.sample sample
        left join fetch sample.bioMaterials
        where lib.libraryId = :libraryId
    ]]></query>

    <query name="findSamplesWithSitesBySampleName"><![CDATA[
        select sample
        from Sample sample
        where sample.sampleName = :sampleName
    ]]></query>

    <query name="findSamplesWithSitesBySampleAcc"><![CDATA[
        select sample
        from Sample sample
        where sample.sampleAcc = :sampleAcc
    ]]></query>

    <query name="findSamplesWithSitesByAcc"><![CDATA[
        select sample
        from BaseSequenceEntity bse
        inner join bse.sample sample
        left outer join fetch sample.bioMaterials
        where bse.cameraAcc=:entityAcc
    ]]></query>

    <query name="findSequenceTextByBseEntityId"><![CDATA[
        select seq.sequence
        from BaseSequenceEntity bse
        inner join bse.bioSequence seq
        where bse.entityId = :entityId
    ]]></query>


     <!--select distinct subject.entityId, subject-->
        <!--from BlastHit al inner join al.subjectEntity subject-->
        <!--where al.blastHitId = :blastHitId-->
    <query name="findSubjectBseByBlastHitId"><![CDATA[
        select bse.entityId, bse
        from BaseSequenceEntity bse
        where bse.cameraAcc in
            (select al.subjectAcc
                from BlastHit al
                where al.blastHitId = :blastHitId)
    ]]></query>

    <query name="findSubjectBseByResultNode"><![CDATA[
        select bse.entityId, bse
        from BaseSequenceEntity bse
        where bse.cameraAcc in
            (select al.subjectAcc
                from BlastHit al
                where al.resultNode.objectId = :resultNodeId)
    ]]></query>

    <query name="findSubjectEntityByBlastHitId"><![CDATA[
        select subject
        from BlastHit al inner join al.subjectEntity subject
        where al.blastHitId = :alignment_id
    ]]></query>

    <query name="findTasksByIdRange"><![CDATA[
        select task
        from Task task
        where task.objectId > :startId and task.objectId < :endId
        and (task.taskDeleted is null or task.taskDeleted = false)
        order by task.objectId desc
    ]]></query>

    <query name="findOrderedTasksByIdRange"><![CDATA[
        select task
        from Task task
        where task.objectId > :startId and task.objectId < :endId
        and (task.taskDeleted is null or task.taskDeleted = false)
        order by task.objectId desc task.parentTaskId desc
    ]]></query>

    <query name="findTaskWithEvents"><![CDATA[
        select distinct task
        from Task task inner join fetch task.events
        where task.objectId = :taskId
    ]]></query>

    <query name="findTaskWithMessages"><![CDATA[
        select distinct task
        from Task task left outer join fetch task.messages
        where task.objectId = :taskId
    ]]></query>

    <query name="findTaskWithMessagesAndParameters"><![CDATA[
        select distinct task
        from Task task
        left join fetch task.messages
        left join fetch task.taskParameterSet
        where task.objectId = :taskId
    ]]></query>    

    <query name="findTaskWithResults"><![CDATA[
        select distinct task
        from Task task left outer join fetch task.outputNodes
        where task.objectId = :taskId
    ]]></query>

    <sql-query name="searchInfoSqlQuery" resultset-ref="searchJobInfoMapping">
        select
          task.task_id as taskId,
          task.job_name as jobName,
          {first_event.*},
          {last_event.*},
          (select parameter_value
           from task_parameter tp
           where tp.task_id = task.task_id
             and tp.parameter_name = 'searchString') as query,
        (select parameter_value
         from task_parameter tp
         where tp.task_id = task.task_id
           and tp.parameter_name = 'searchTopic') as searchTopic
         from
           (select t.*, (select max(event_no) from camera.task_event e where e.task_id=t.task_id) as last_event_no
            from task t
            where t.task_owner=:userLogin and not coalesce(t.task_deleted_flag,false) and t.subclass||'' = 'search'
            order by t.task_id desc limit 5) as task
           inner join camera.task_event as first_event on first_event.task_id=task.task_id and first_event.event_no = 0
           inner join camera.task_event as last_event on last_event.task_id=task.task_id and last_event.event_no=task.last_event_no
    </sql-query>

    <sql-query name="taskParameterPvoStringQuery" resultset-ref="taskParameterPvoStringMapping">
       select task.task_id, task.parameters from camera.task order by task_id asc;
    </sql-query>

</hibernate-mapping>
