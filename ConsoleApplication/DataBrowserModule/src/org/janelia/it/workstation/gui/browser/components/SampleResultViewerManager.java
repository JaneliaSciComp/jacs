package org.janelia.it.workstation.gui.browser.components;

import java.awt.Component;
import java.util.concurrent.Callable;

import org.janelia.it.jacs.model.domain.DomainObject;
import org.janelia.it.jacs.model.domain.Reference;
import org.janelia.it.jacs.model.domain.sample.NeuronFragment;
import org.janelia.it.jacs.model.domain.sample.ObjectiveSample;
import org.janelia.it.jacs.model.domain.sample.PipelineResult;
import org.janelia.it.jacs.model.domain.sample.Sample;
import org.janelia.it.jacs.model.domain.sample.SamplePipelineRun;
import org.janelia.it.workstation.gui.browser.api.DomainMgr;
import org.janelia.it.workstation.gui.browser.events.Events;
import org.janelia.it.workstation.gui.browser.events.selection.DomainObjectSelectionEvent;
import org.janelia.it.workstation.gui.browser.events.selection.SampleResultSelectionEvent;
import org.janelia.it.workstation.gui.browser.model.SampleResult;
import org.janelia.it.workstation.gui.framework.session_mgr.SessionMgr;
import org.janelia.it.workstation.shared.util.Utils;
import org.janelia.it.workstation.shared.workers.SimpleWorker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.eventbus.Subscribe;

import org.janelia.it.jacs.model.domain.sample.NeuronSeparation;

/**
 * Manages the life cycle of domain list viewers based on user generated selected events. This manager
 * either reuses existing viewers, or creates them as needed and docks them in the appropriate place.
 * 
 * @author <a href="mailto:rokickik@janelia.hhmi.org">Konrad Rokicki</a>
 */
public class SampleResultViewerManager implements ViewerManager<SampleResultViewerTopComponent> {

    private final static Logger log = LoggerFactory.getLogger(SampleResultViewerManager.class);
    
    public static SampleResultViewerManager instance;
    
    private SampleResultViewerManager() {
    }
    
    public static SampleResultViewerManager getInstance() {
        if (instance==null) {
            instance = new SampleResultViewerManager();
            Events.getInstance().registerOnEventBus(instance);
        }
        return instance;
    }

    /* Manage the active instance of this top component */
    
    private SampleResultViewerTopComponent activeInstance;
    void activate(SampleResultViewerTopComponent instance) {
        activeInstance = instance;
    }
    boolean isActive(SampleResultViewerTopComponent instance) {
        return activeInstance == instance;
    }
    @Override
    public SampleResultViewerTopComponent getActiveViewer() {
        return activeInstance;
    }
    
    @Override
    public String getViewerName() {
        return "DomainListViewTopComponent";
    }

    @Override
    public Class<SampleResultViewerTopComponent> getViewerClass() {
        return SampleResultViewerTopComponent.class;
    }

    @Subscribe
    public void sampleResultSelected(SampleResultSelectionEvent event) {
        
        // We only care about events generated by the explorer
//        if (!Utils.hasAncestorWithType((Component)event.getSource(),DomainViewerTopComponent.class)) {
//            log.debug("Event source is not domain viewer: {}",event);
//            return;
//        }

        log.info("sampleResultSelected({})",event.getSampleResult());

        SampleResultViewerTopComponent viewer = SampleResultViewerManager.getInstance().getActiveViewer();
        
        if (viewer!=null) {   
            viewer.loadSampleResult(event.getSampleResult(), event.isUserDriven(), null);
        }
    }
    
//    @Subscribe
//    public void neuronFragmentSelected(final DomainObjectSelectionEvent event) {
//
//        // We only care about events generated by list views
//        if (!Utils.hasAncestorWithType((Component)event.getSource(),DomainListViewTopComponent.class)) {
//            log.debug("Event source is not a list viewer: {}",event);
//            return;
//        }
//        
//        DomainObject domainObject = event.getDomainObject();
//        if (domainObject instanceof NeuronFragment) {
//            final NeuronFragment neuronFragment = (NeuronFragment)domainObject;
//            final Reference sampleRef = neuronFragment.getSample();
//            final SampleResultViewerTopComponent viewer = SampleResultViewerManager.getInstance().getActiveViewer();
//
//            SimpleWorker worker = new SimpleWorker() {
//                SampleResult sampleResult;
//                
//                @Override
//                protected void doStuff() throws Exception {
//                    Sample sample = (Sample)DomainMgr.getDomainMgr().getModel().getDomainObject(sampleRef);
//                    sampleResult = getSampleResult(sample, neuronFragment);
//                }
//
//                @Override
//                protected void hadSuccess() {
//                    viewer.loadSampleResult(sampleResult, true, new Callable<Void>() {
//                        @Override
//                        public Void call() throws Exception {
//                            Events.getInstance().postOnEventBus(new DomainObjectSelectionEvent(event.getSource(), neuronFragment, true, true));
//                            return null;
//                        }
//                        
//                    });
//                }
//
//                @Override
//                protected void hadError(Throwable error) {
//                    SessionMgr.getSessionMgr().handleException(error);
//                }
//            };
//            worker.execute();
//        }
//        
//    }
    
    public static SampleResult getSampleResult(Sample sample, NeuronFragment neuronFragment) {
        if (neuronFragment==null) return null;
        for(String objective : sample.getOrderedObjectives()) {
            ObjectiveSample objectiveSample = sample.getObjectiveSample(objective);
            for(SamplePipelineRun run : objectiveSample.getPipelineRuns()) {
                if (run!=null && run.getResults()!=null) {
                    for(PipelineResult result : run.getResults()) {
                        if (result!=null && result.getResults()!=null) {
                            for(PipelineResult secondaryResult : result.getResults()) {
                                if (secondaryResult!=null && secondaryResult instanceof NeuronSeparation) {
                                    NeuronSeparation separation = (NeuronSeparation)secondaryResult;
                                    if (separation.getFragmentsReference().getReferenceId().equals(neuronFragment.getSeparationId())) {
                                        return new SampleResult(sample, secondaryResult);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
    
}
