package org.janelia.it.workstation.gui.browser.components;

import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.IOException;
import org.janelia.it.jacs.model.domain.DomainObject;
import org.janelia.it.workstation.gui.browser.components.editor.DomainFilterEditorPanel;
import org.janelia.it.workstation.gui.browser.flavors.DomainObjectFlavor;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.datatransfer.ExTransferable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.it.workstation.gui.browser.components//DomainFilterEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = DomainFilterEditorTopComponent.TC_NAME,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.janelia.it.workstation.gui.browser.components.DomainFilterEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DomainFilterEditorAction",
        preferredID = "DomainFilterEditorTopComponent"
)
@Messages({
    "CTL_DomainFilterEditorAction=Filter Editor",
    "CTL_DomainFilterEditorTopComponent=Filter Editor"
})
public final class DomainFilterEditorTopComponent extends TopComponent {

    public static final String TC_NAME = "DomainFilterEditorTopComponent";
    private final static Logger log = LoggerFactory.getLogger(DomainFilterEditorTopComponent.class);
    
    private DomainFilterEditorPanel editorPanel;
    
    public DomainFilterEditorTopComponent() {
        initComponents();
        
        this.editorPanel = new DomainFilterEditorPanel();
        mainPanel.add(editorPanel, BorderLayout.CENTER);
        
        setName(Bundle.CTL_DomainFilterEditorTopComponent());
        
        MyDropTargetListener dtl = new MyDropTargetListener();
        DropTarget dt = new DropTarget(this, dtl);
        dt.setDefaultActions(DnDConstants.ACTION_COPY);
        dt.setActive(true);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        mainPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    @Override
    protected void componentActivated() {
//        ExplorerUtils.activateActions(mgr, true);
    }
    
    @Override
    protected void componentDeactivated() {
//        ExplorerUtils.activateActions(mgr, false);
    }
    
        
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public class MyDropTargetListener implements DropTargetListener {

        public void dragEnter(DropTargetDragEvent dtde) {
        }

        public void dragExit(DropTargetEvent dtde) {
        }

        public void dragOver(DropTargetDragEvent dtde) {
        }

        public void dropActionChanged(DropTargetDragEvent dtde) {
        }

        public void drop(DropTargetDropEvent dtde) {
            
            Point point = dtde.getLocation();
            if (!editorPanel.isInFilterPane(point)) {
                log.warn("Dropped outside of filter panel");
                dtde.rejectDrop();
                dtde.dropComplete(false);
                return;
            }
            
            if (dtde.isDataFlavorSupported(DomainObjectFlavor.DOMAIN_OBJECT_FLAVOR)) {
                try {
                    Object transData = dtde.getTransferable().getTransferData(DomainObjectFlavor.DOMAIN_OBJECT_FLAVOR);
                    if (transData instanceof DomainObject) {
                        dtde.acceptDrop(DnDConstants.ACTION_COPY);
                        DomainObject obj = (DomainObject)transData;
                        editorPanel.dropDomainObject(obj);
                        dtde.dropComplete(true);
                    }
                }
                catch (UnsupportedFlavorException e) {
                    log.warn("Flavor not supported",e);
                    dtde.rejectDrop();
                    dtde.dropComplete(true);
                }
                catch (IOException e) {
                    log.warn("Error dropping domain object",e);
                    dtde.rejectDrop();
                    dtde.dropComplete(false);
                }
            }
            else if (dtde.isDataFlavorSupported(ExTransferable.multiFlavor)) {
                // TODO: support multidrop
                log.warn("Multi flavor!");
                dtde.rejectDrop();
                dtde.dropComplete(false);
            }
            else {
                log.warn("Flavor not supported");
                dtde.rejectDrop();
                dtde.dropComplete(false);
            }
        }

    }
}
