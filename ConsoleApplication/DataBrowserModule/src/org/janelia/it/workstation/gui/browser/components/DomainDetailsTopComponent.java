package org.janelia.it.workstation.gui.browser.components;

import com.google.common.eventbus.Subscribe;
import java.awt.BorderLayout;
import org.janelia.it.workstation.gui.browser.components.domain.DomainObjectDetailsPanel;
import org.janelia.it.workstation.gui.browser.events.Events;
import org.janelia.it.workstation.gui.browser.events.selection.DomainObjectSelectionEvent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.it.workstation.gui.browser.components//DomainDetails//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = DomainDetailsTopComponent.PREFERRED_ID,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "appExplorerBtm", openAtStartup = true, position = 20)
@ActionID(category = "Window", id = "org.janelia.it.workstation.gui.browser.components.DomainDetailsTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DomainDetailsAction",
        preferredID = DomainDetailsTopComponent.PREFERRED_ID
)
@Messages({
    "CTL_DomainDetailsAction=Data Inspector",
    "CTL_DomainDetailsTopComponent=Data Inspector",
    "HINT_DomainDetailsTopComponent=Details about the selected domain object"
})
public final class DomainDetailsTopComponent extends TopComponent {

    private Logger log = LoggerFactory.getLogger(DomainDetailsTopComponent.class);

    public static final String PREFERRED_ID = "DomainDetailsTopComponent";
    
    private final DomainObjectDetailsPanel detailsPanel;

    public DomainDetailsTopComponent() {
        initComponents();
        setName(Bundle.CTL_DomainDetailsTopComponent());
        setToolTipText(Bundle.HINT_DomainDetailsTopComponent());
        this.detailsPanel = new DomainObjectDetailsPanel();
        add(detailsPanel, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        Events.getInstance().registerOnEventBus(this);
    }

    @Override
    public void componentClosed() {
        Events.getInstance().unregisterOnEventBus(this);
    }

    @Subscribe
    public void loadDomainObject(DomainObjectSelectionEvent event) {
        
        // We only care about selection events
        if (!event.isSelect()) {
            log.debug("Event is not selection: {}",event);
            return;
        }
        
        detailsPanel.loadDomainObject(event.getDomainObject());
    }
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
