package org.janelia.it.workstation.gui.browser.components;

import java.awt.BorderLayout;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import org.janelia.it.workstation.gui.browser.icongrid.IconGridViewer;
import org.janelia.it.workstation.gui.browser.icongrid.node.NodeIconGridViewer;
import org.janelia.it.workstation.gui.framework.session_mgr.SessionMgr;
import org.janelia.it.workstation.gui.util.WindowLocator;
import org.janelia.it.workstation.shared.workers.SimpleWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays children of domain objects.
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.it.workstation.gui.browser.components//DomainBrowser//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = DomainBrowserTopComponent.TC_NAME,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.janelia.it.workstation.gui.browser.components.DomainBrowserTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DomainBrowserAction",
        preferredID = "DomainBrowserTopComponent"
)
@Messages({
    "CTL_DomainBrowserAction=Domain Browser",
    "CTL_DomainBrowserTopComponent=Domain Browser",
    "HINT_DomainBrowserTopComponent=Domain Browser"
})
public final class DomainBrowserTopComponent extends TopComponent implements LookupListener {

    public static final String TC_NAME = "DomainBrowserTopComponent";
    
    private final static Logger log = LoggerFactory.getLogger(DomainBrowserTopComponent.class);
    
    private final IconGridViewer<Node> iconGridViewer;
    
    private Lookup.Result<AbstractNode> result = null;
    
    public DomainBrowserTopComponent() {
        super(Lookup.EMPTY);
        initComponents();
        iconGridViewer = new NodeIconGridViewer();
        mainPanel.add(iconGridViewer, BorderLayout.CENTER);
        setName(Bundle.CTL_DomainBrowserTopComponent());
        setToolTipText(Bundle.HINT_DomainBrowserTopComponent());
    }
    
    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        mainPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // Typically we would use the following line to react to the currently selected top component
        //result = Utilities.actionsGlobalContext().lookupResult(AbstractNode.class);
        // But in this case we're only interested in the domain explorer
        TopComponent win = WindowLocator.getByName(DomainExplorerTopComponent.TC_NAME);
        result = win.getLookup().lookupResult(AbstractNode.class);
        result.addLookupListener(this);
    }
    
    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    @Override
    public void resultChanged(LookupEvent lookupEvent) {
        Collection<? extends AbstractNode> allNodes = result.allInstances();
        if (!allNodes.isEmpty()) {
            final AbstractNode obj = allNodes.iterator().next();

            SimpleWorker worker = new SimpleWorker() {
                
                Node[] children;
                
                @Override
                protected void doStuff() throws Exception {
                    children = obj.getChildren().getNodes(true);
                }

                @Override
                protected void hadSuccess() {
                    List<Node> nodes = Arrays.asList(children);
                    iconGridViewer.setContextObject(obj);
                    iconGridViewer.showImageObjects(nodes);
                }

                @Override
                protected void hadError(Throwable error) {
                    SessionMgr.getSessionMgr().handleException(error);
                }
            };
            worker.execute();
            
            
//            if (obj instanceof TreeNode) {
//                TreeNode treeNode = (TreeNode)obj;
//                nameLabel.setText(treeNode.getName());
//                numChildrenLabel.setText(treeNode.getNumChildren()+" children");
//            }
//            else {
//                nameLabel.setText(obj.getClass().getName()+"#"+obj.getId());
//                numChildrenLabel.setText("");
//            }
        } else {
            // No change to current DomainObject selection
            //nameLabel.setText("[no selection]");
            //numChildrenLabel.setText("");
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
