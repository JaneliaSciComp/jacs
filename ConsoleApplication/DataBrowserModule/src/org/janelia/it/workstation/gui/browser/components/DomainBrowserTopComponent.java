package org.janelia.it.workstation.gui.browser.components;

import com.google.common.eventbus.Subscribe;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import org.janelia.it.jacs.model.domain.DomainObject;
import org.janelia.it.jacs.model.domain.ontology.Annotation;
import org.janelia.it.jacs.model.domain.workspace.ObjectSet;
import org.janelia.it.workstation.gui.browser.api.DomainDAO;
import org.janelia.it.workstation.gui.browser.components.viewer.PaginatedResultsPanel;
import org.janelia.it.workstation.gui.browser.events.Events;
import org.janelia.it.workstation.gui.browser.events.selection.DomainObjectSelectionModel;
import org.janelia.it.workstation.gui.browser.events.selection.ObjectSetSelectionEvent;
import org.janelia.it.workstation.gui.browser.nodes.ObjectSetNode;
import org.janelia.it.workstation.gui.browser.search.ResultPage;
import org.janelia.it.workstation.gui.browser.search.SearchResults;
import org.janelia.it.workstation.gui.framework.session_mgr.SessionMgr;
import org.janelia.it.workstation.shared.workers.SimpleWorker;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Top component which displays children of domain objects.
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.it.workstation.gui.browser.components//DomainBrowser//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = DomainBrowserTopComponent.TC_NAME,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.janelia.it.workstation.gui.browser.components.DomainBrowserTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_DomainBrowserAction",
        preferredID = DomainBrowserTopComponent.TC_NAME
)
@Messages({
    "CTL_DomainBrowserAction=Domain Browser",
    "CTL_DomainBrowserTopComponent=Domain Browser",
    "HINT_DomainBrowserTopComponent=Domain Browser"
})
public final class DomainBrowserTopComponent extends TopComponent {

    public static final String TC_NAME = "DomainBrowserTopComponent";
    
    private final static Logger log = LoggerFactory.getLogger(DomainBrowserTopComponent.class);
    
    private final PaginatedResultsPanel resultsPanel;
    
    private final InstanceContent content = new InstanceContent();
    
    private final DomainObjectSelectionModel selectionModel = new DomainObjectSelectionModel();
    
    private static DomainBrowserTopComponent activeInstance;
    private static void activate(DomainBrowserTopComponent instance) {
        activeInstance = instance;
    }
    private static boolean isActive(DomainBrowserTopComponent instance) {
        return activeInstance == instance;
    }
    
    public DomainBrowserTopComponent() {
        initComponents();
        
        resultsPanel = new PaginatedResultsPanel(selectionModel) {
            @Override
            protected ResultPage getPage(SearchResults searchResults, int page) throws Exception {
                return searchResults.getPage(page);
            }
        };
        mainPanel.add(resultsPanel, BorderLayout.CENTER);
        
        setName(Bundle.CTL_DomainBrowserTopComponent());
        setToolTipText(Bundle.HINT_DomainBrowserTopComponent());
        associateLookup(new AbstractLookup(content));
    }
    
    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        mainPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        Events.getInstance().registerOnEventBus(this);
        log.info("Registering results panel on event bus: "+resultsPanel);
        Events.getInstance().registerOnEventBus(resultsPanel);
        activate(this);
    }
    
    @Override
    public void componentClosed() {
        Events.getInstance().unregisterOnEventBus(this);
        log.info("Unregistering results panel on event bus: "+resultsPanel);
        Events.getInstance().unregisterOnEventBus(resultsPanel);
    }

    @Override
    protected void componentActivated() {
        activate(this);
        ObjectSetNode objectSetNode = getCurrent();
        DomainExplorerTopComponent.getInstance().selectNode(objectSetNode);
    }
    
    @Override
    protected void componentDeactivated() {
    }
    
    private ObjectSetNode getCurrent() {
        return getLookup().lookup(ObjectSetNode.class);
    }

    private boolean setCurrent(ObjectSetNode objectSetNode) {
        ObjectSetNode curr = getLookup().lookup(ObjectSetNode.class);
        if (curr==objectSetNode) {
            return false;
        }
        if (curr!=null) {
            content.remove(curr);
        }
        content.add(objectSetNode);
        return true;
    }
    
    @Subscribe
    public void loadObjectSet(ObjectSetSelectionEvent event) {

        // We only care about events if we're active
        if (!isActive(this)) {
            log.info("Browser is not active");
            return;
        }
        
        // We only care about events generated by the explorer
        if (event.getSource()!=DomainExplorerTopComponent.getInstance()) {
            log.info("Event source is not explorer: {}",event);
            return;
        }
        
        // We only care about selection events
        if (!event.isSelect()) {
            log.info("Event is not selection: {}",event);
            return;
        }
        
        requestVisible();
        
        ObjectSetNode objectSetNode = event.getObjectSetNode();

        // Do we already have the given node loaded?
        if (!setCurrent(objectSetNode)) {
            return;
        }
        
        final ObjectSet objectSet = objectSetNode.getObjectSet();
        
        log.trace("loadObjectSet "+objectSet);

        SimpleWorker childLoadingWorker = new SimpleWorker() {

            private List<DomainObject> domainObjects;
            private List<Annotation> annotations;

            @Override
            protected void doStuff() throws Exception {
                log.debug("Getting children...");

                DomainDAO dao = DomainExplorerTopComponent.getDao();
                domainObjects = dao.getDomainObjects(SessionMgr.getSubjectKey(), objectSet);
                List<Long> ids = new ArrayList<>();
                for(DomainObject domainObject : domainObjects) {
                    ids.add(domainObject.getId());
                }
                annotations = dao.getAnnotations(SessionMgr.getSubjectKey(), ids);
                log.debug("  Showing "+domainObjects.size()+" items");
            }

            @Override
            protected void hadSuccess() {
                if (domainObjects==null || domainObjects.isEmpty()) {
                    resultsPanel.showNothing();
                    return;
                }
                SearchResults searchResults = SearchResults.paginate(domainObjects, annotations);
                resultsPanel.showSearchResults(searchResults);
                
                setName(objectSet.getName());
            }

            @Override
            protected void hadError(Throwable error) {
                SessionMgr.getSessionMgr().handleException(error);
            }
        };

        childLoadingWorker.execute();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
