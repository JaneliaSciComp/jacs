package org.janelia.it.workstation.gui.browser.components;

import java.awt.Component;

import org.janelia.it.workstation.gui.browser.events.Events;
import org.janelia.it.workstation.gui.browser.events.selection.DomainObjectSelectionEvent;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.eventbus.Subscribe;

/**
 * Manages the life cycle of domain viewers based on user generated selected events. This manager
 * either reuses existing viewers, or creates them as needed and docks them in the appropriate place.
 * 
 * @author <a href="mailto:rokickik@janelia.hhmi.org">Konrad Rokicki</a>
 */
public class DomainViewerManager {

    private final static Logger log = LoggerFactory.getLogger(DomainViewerManager.class);
    
    public static DomainViewerManager instance;
    
    private DomainViewerManager() {
    }
    
    public static DomainViewerManager getInstance() {
        if (instance==null) {
            instance = new DomainViewerManager();
            Events.getInstance().registerOnEventBus(instance);
        }
        return instance;
    }

    @Subscribe
    public void loadDomainObject(DomainObjectSelectionEvent event) {

        log.info("loadDomainObject {}",event);
        
        // We only care about selection events
        if (!event.isSelect()) {
            log.debug("Event is not selection: {}",event);
            return;
        }
        
        if (!event.isClearAll()) {
            log.debug("Event is not clear all: {}",event);
            return;
        }

        // We only care about events generated by the explorer
        if (!hasAncestorWithType((Component)event.getSource(),DomainListViewTopComponent.class)) {
            log.debug("Event source is not a list view: {}",event);
            return;
        }
        
        DomainViewerTopComponent targetViewer = DomainViewerTopComponent.getActiveInstance();
        if (targetViewer==null || !targetViewer.isVisible()) {
            // There is no viewer in place, so create new viewer in the appropriate area
            // TODO: this behavior should be a user preference
            Mode myMode = WindowManager.getDefault().findMode("editor2");
            targetViewer = (DomainViewerTopComponent)WindowManager.getDefault().findTopComponent("DomainViewerTopComponent");

            if (!targetViewer.isOpened()) {
                targetViewer.open();
            }
            targetViewer.requestActive();
            
            myMode.dockInto(targetViewer);
        }
        else {
            if (!targetViewer.isOpened()) {
                targetViewer.open();
            }
            targetViewer.requestActive();
        }
        
        targetViewer.loadDomainObject(event.getDomainObject());
    }

    private boolean hasAncestorWithType(Component component, Class<?> clazz) {
        if (clazz==null) return false;
        Component c = component;
        while (c!=null) {
            log.trace("check if {} is assignable from {}",clazz.getName(),c.getClass().getName());
            if (clazz.isAssignableFrom(c.getClass())) {
                return true;
            }
            c = c.getParent();
        }
        return false;
    }
}
